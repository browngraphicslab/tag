{
    "project": {
        "name": "Touch Art Gallery web application",
        "description": "An application for compiling, contextualizing, and sharing digital art collections.",
        "version": "1.0.0",
        "url": "http://cs.brown.edu/research/ptc/tag",
        "logo": "../LADS/images/WideLogo.scale-100.png"
    },
    "files": {
        "LADS/js/Autolinker.js-master/dist/Autolinker.js": {
            "name": "LADS/js/Autolinker.js-master/dist/Autolinker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/Autolinker.js-master/src/Autolinker.js": {
            "name": "LADS/js/Autolinker.js-master/src/Autolinker.js",
            "modules": {},
            "classes": {
                "Autolinker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/Autolinker.js-master/src/matcherRegexSource.js": {
            "name": "LADS/js/Autolinker.js-master/src/matcherRegexSource.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js": {
            "name": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/authoring/jscolor/jscolor.js": {
            "name": "LADS/js/LADS/authoring/jscolor/jscolor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js": {
            "name": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/authoring/LADS.Authoring.NewSettingsView.js": {
            "name": "LADS/js/LADS/authoring/LADS.Authoring.NewSettingsView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.Artmode.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "modules": {},
            "classes": {
                "LADS.Layout.Artmode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.InternetFailurePage.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.InternetFailurePage.js",
            "modules": {},
            "classes": {
                "LADS.Layout.InternetFailurePage.js": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.StartPage.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "modules": {},
            "classes": {
                "LADS.Layout.StartPage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.TourPlayer.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.TourPlayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/layout/LADS.Layout.VideoPlayer.js": {
            "name": "LADS/js/LADS/layout/LADS.Layout.VideoPlayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ArtworkTrack.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ArtworkTrack.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.AudioTrack.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.AudioTrack.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Command.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Command.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Constants.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ImageTrack.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ImageTrack.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkTrack.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkTrack.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkablePart.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkablePart.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TopMenu.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TopMenu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.VideoTrack.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.VideoTrack.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js": {
            "name": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/util/LADS.Util.Splitscreen.js": {
            "name": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/util/LADS.Util.js": {
            "name": "LADS/js/LADS/util/LADS.Util.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/LADS/worktop/LADS.Worktop.Database.js": {
            "name": "LADS/js/LADS/worktop/LADS.Worktop.Database.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.csv.js": {
            "name": "LADS/js/d3/d3.csv.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.geo.js": {
            "name": "LADS/js/d3/d3.geo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.geom.js": {
            "name": "LADS/js/d3/d3.geom.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.js": {
            "name": "LADS/js/d3/d3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.layout.js": {
            "name": "LADS/js/d3/d3.layout.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/d3/d3.v2.js": {
            "name": "LADS/js/d3/d3.v2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/html2canvas/html2canvas.js": {
            "name": "LADS/js/html2canvas/html2canvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/html2canvas/jquery.plugin.html2canvas.js": {
            "name": "LADS/js/html2canvas/jquery.plugin.html2canvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/jQueryUI/js/jquery-1.11.0.js": {
            "name": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/jQueryUI/js/jquery-1.7.1.js": {
            "name": "LADS/js/jQueryUI/js/jquery-1.7.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/seadragon/src/Seadragon.Drawer.js": {
            "name": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/seadragon/src/Seadragon.MouseTracker.js": {
            "name": "LADS/js/seadragon/src/Seadragon.MouseTracker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/seadragon/src/Seadragon.Spring.js": {
            "name": "LADS/js/seadragon/src/Seadragon.Spring.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/seadragon/src/Seadragon.Viewer.js": {
            "name": "LADS/js/seadragon/src/Seadragon.Viewer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/seadragon/seadragon-min.js": {
            "name": "LADS/js/seadragon/seadragon-min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js": {
            "name": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/aes.js": {
            "name": "LADS/js/utils/CryptoJS/components/aes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/cipher-core.js": {
            "name": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/core.js": {
            "name": "LADS/js/utils/CryptoJS/components/core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/enc-base64.js": {
            "name": "LADS/js/utils/CryptoJS/components/enc-base64.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/enc-utf16.js": {
            "name": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/evpkdf.js": {
            "name": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/format-hex.js": {
            "name": "LADS/js/utils/CryptoJS/components/format-hex.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/hmac.js": {
            "name": "LADS/js/utils/CryptoJS/components/hmac.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/md5.js": {
            "name": "LADS/js/utils/CryptoJS/components/md5.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/mode-cfb.js": {
            "name": "LADS/js/utils/CryptoJS/components/mode-cfb.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/mode-ctr-gladman.js": {
            "name": "LADS/js/utils/CryptoJS/components/mode-ctr-gladman.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/mode-ctr.js": {
            "name": "LADS/js/utils/CryptoJS/components/mode-ctr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/mode-ecb.js": {
            "name": "LADS/js/utils/CryptoJS/components/mode-ecb.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/mode-ofb.js": {
            "name": "LADS/js/utils/CryptoJS/components/mode-ofb.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pad-ansix923.js": {
            "name": "LADS/js/utils/CryptoJS/components/pad-ansix923.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pad-iso10126.js": {
            "name": "LADS/js/utils/CryptoJS/components/pad-iso10126.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pad-iso97971.js": {
            "name": "LADS/js/utils/CryptoJS/components/pad-iso97971.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pad-nopadding.js": {
            "name": "LADS/js/utils/CryptoJS/components/pad-nopadding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pad-zeropadding.js": {
            "name": "LADS/js/utils/CryptoJS/components/pad-zeropadding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/pbkdf2.js": {
            "name": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/rabbit-legacy.js": {
            "name": "LADS/js/utils/CryptoJS/components/rabbit-legacy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/rabbit.js": {
            "name": "LADS/js/utils/CryptoJS/components/rabbit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/rc4.js": {
            "name": "LADS/js/utils/CryptoJS/components/rc4.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/ripemd160.js": {
            "name": "LADS/js/utils/CryptoJS/components/ripemd160.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha1.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha224.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha224.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha256.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha256.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha3.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha3.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha384.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha384.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/sha512.js": {
            "name": "LADS/js/utils/CryptoJS/components/sha512.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/tripledes.js": {
            "name": "LADS/js/utils/CryptoJS/components/tripledes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/components/x64-core.js": {
            "name": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/CryptoJS/docs.js": {
            "name": "LADS/js/utils/CryptoJS/docs.js",
            "modules": {},
            "classes": {
                "CryptoJS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/avltree.js": {
            "name": "LADS/js/utils/avltree.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/doubleLinkedList.js": {
            "name": "LADS/js/utils/doubleLinkedList.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/hammer.js": {
            "name": "LADS/js/utils/hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/jquery.getScrollbarWidth.js": {
            "name": "LADS/js/utils/jquery.getScrollbarWidth.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/utils/jquery.hammer.js": {
            "name": "LADS/js/utils/jquery.hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/js/tagInk.js": {
            "name": "LADS/js/tagInk.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/TAG-embed.js": {
            "name": "LADS/TAG-embed.js",
            "modules": {},
            "classes": {
                "TAG_embed": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "LADS/hammer.js": {
            "name": "LADS/hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "LADS/tests.js": {
            "name": "LADS/tests.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "telemetry/server.js": {
            "name": "telemetry/server.js",
            "modules": {},
            "classes": {
                "Telemetry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "telemetry/telemetryTest.js": {
            "name": "telemetry/telemetryTest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Autolinker": {
            "name": "Autolinker",
            "shortname": "Autolinker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "LADS/js/Autolinker.js-master/src/Autolinker.js",
            "line": 1,
            "extends": "Object",
            "singleton": "Singleton class which exposes the {@link #link} method, used to process a given string of text,\nand wrap the URLs, email addresses, and Twitter handles in the appropriate anchor (&lt;a&gt;) tags."
        },
        "LADS.Layout.Artmode": {
            "name": "LADS.Layout.Artmode",
            "shortname": "LADS.Layout.Artmode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 7,
            "description": "The artwork viewer, which contains a sidebar with tools\nand thumbnails as well as a central area for the deepzoom image.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "prevInfo",
                    "description": "contains information about returning to the previous page",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "information about current artwork and whether we're in splitscreen mode",
                    "type": "Object"
                },
                {
                    "name": "exhibition",
                    "description": "the exhibition we came from (if any)",
                    "type": "Doq"
                }
            ]
        },
        "LADS.Layout.InternetFailurePage.js": {
            "name": "LADS.Layout.InternetFailurePage.js",
            "shortname": "LADS.Layout.InternetFailurePage.js",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "LADS/js/LADS/layout/LADS.Layout.InternetFailurePage.js",
            "line": 11,
            "description": "Internet failure page, which appears when TAG detects a loss of internet.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "errorType",
                    "description": ""
                }
            ]
        },
        "LADS.Layout.StartPage": {
            "name": "LADS.Layout.StartPage",
            "shortname": "LADS.Layout.StartPage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 4,
            "description": "The start page for TAG, which contains mueseum info, server preferences and credits.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "startPageCallback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "that                 collection of public methods and properties",
                "type": "Object"
            }
        },
        "CryptoJS": {
            "name": "CryptoJS",
            "shortname": "CryptoJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "LADS/js/utils/CryptoJS/docs.js",
            "line": 1,
            "description": "Class to capture CryptoJS properties and methods."
        },
        "TAG_embed": {
            "name": "TAG_embed",
            "shortname": "TAG_embed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "LADS/TAG-embed.js",
            "line": 1,
            "description": "The end user should include this file in their website. Calling TAG_embed\nwith the appropriate inputs will create the TAG embedding in an iframe, using\nthe demo.html file as the iframe source.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tagInput",
                    "description": "the following property inputs are the properties of tagInput",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "relative path from your html file to the TAG directory (e.g., './a/b/TAG')",
                    "type": "Property"
                },
                {
                    "name": "containerId",
                    "description": "the id of the div in which you want to embed TAG",
                    "type": "Property"
                },
                {
                    "name": "serverIp",
                    "description": "the ip adress of the server to which you want to connect",
                    "type": "Property"
                },
                {
                    "name": "width",
                    "description": "the desired width of TAG",
                    "type": "Property"
                },
                {
                    "name": "height",
                    "description": "the desired height of TAG",
                    "type": "Property"
                },
                {
                    "name": "allowServerChange",
                    "description": "should a button be shown on the splash screen that allows server change?",
                    "type": "Property"
                },
                {
                    "name": "hiddenCollections",
                    "description": "a list of collection IDs for published collections to be hidden",
                    "type": "Property"
                }
            ]
        },
        "Telemetry": {
            "name": "Telemetry",
            "shortname": "Telemetry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "telemetry/server.js",
            "line": 1,
            "description": "A basic telemetry server. Should probably be hooked up with a DB.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "LADS/js/Autolinker.js-master/dist/Autolinker.js",
            "line": 23,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "htmlRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!A regular expression used to pull out HTML tags from a string.!~YUIDOC_LINE~!!~YUIDOC_LINE~!Capturing groups:!~YUIDOC_LINE~!!~YUIDOC_LINE~!1. If it is an end tag, this group will have the '/'.!~YUIDOC_LINE~!2. The tag name.",
            "type": "RegExp",
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/dist/Autolinker.js",
            "line": 37,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "prefixRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.",
            "type": "RegExp",
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/dist/Autolinker.js",
            "line": 46,
            "description": "Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \nDoes not link URLs found within HTML tags.\n\nFor instance, if given the text: `You should go to http://www.yahoo.com`, then the result\nwill be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`",
            "itemtype": "method",
            "name": "link",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML text to link URLs within.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Any options for the autolinking, specified in an object. It may have the following properties:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "newWindow",
                            "description": "True if the links should open in a new window, false otherwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stripPrefix",
                            "description": "True if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of links, false otherwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "truncate",
                            "description": "A number for how many characters long URLs/emails/twitter handles should be truncated to\n  inside the text of a link. If the URL/email/twitter is over the number of characters, it will be truncated to this length by \n  adding a two period ellipsis ('..') into the middle of the string.\n  Ex: a url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look like this: 'http://www...th/to/a/file'",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "twitter",
                            "description": "True if Twitter handles (\"@example\") should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "email",
                            "description": "True if email addresses should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "urls",
                            "description": "True if miscellaneous URLs should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The HTML text, with URLs automatically linked",
                "type": "String"
            },
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/dist/Autolinker.js",
            "line": 207,
            "itemtype": "property",
            "name": "matcherRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!The regular expression that matches URLs, email addresses, and Twitter handles.!~YUIDOC_LINE~!!~YUIDOC_LINE~!Capturing groups:!~YUIDOC_LINE~!!~YUIDOC_LINE~!1. Group that is used to determine if there is a Twitter handle match (i.e. @someTwitterUser). Simply check for its existence!~YUIDOC_LINE~!   to determine if there is a Twitter handle match. The next couple of capturing groups give information about the Twitter !~YUIDOC_LINE~!   handle match.!~YUIDOC_LINE~!2. The whitespace character before the @sign in a Twitter handle. This is needed because there are no lookbehinds in JS regular!~YUIDOC_LINE~!   expressions, and can be used to reconstruct the original string in a replace().!~YUIDOC_LINE~!3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.!~YUIDOC_LINE~!4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full address.!~YUIDOC_LINE~!   Ex: 'me@my.com'!~YUIDOC_LINE~!5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.!~YUIDOC_LINE~!   This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor",
            "access": "private",
            "tagname": "",
            "type": "RegExp",
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/src/Autolinker.js",
            "line": 14,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "htmlRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!A regular expression used to pull out HTML tags from a string.!~YUIDOC_LINE~!!~YUIDOC_LINE~!Capturing groups:!~YUIDOC_LINE~!!~YUIDOC_LINE~!1. If it is an end tag, this group will have the '/'.!~YUIDOC_LINE~!2. The tag name.",
            "type": "RegExp",
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/src/Autolinker.js",
            "line": 28,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "prefixRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.",
            "type": "RegExp",
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/src/Autolinker.js",
            "line": 37,
            "description": "Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \nDoes not link URLs found within HTML tags.\n\nFor instance, if given the text: `You should go to http://www.yahoo.com`, then the result\nwill be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`",
            "itemtype": "method",
            "name": "link",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML text to link URLs within.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Any options for the autolinking, specified in an object. It may have the following properties:",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "newWindow",
                            "description": "True if the links should open in a new window, false otherwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "stripPrefix",
                            "description": "True if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of links, false otherwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "truncate",
                            "description": "A number for how many characters long URLs/emails/twitter handles should be truncated to\n  inside the text of a link. If the URL/email/twitter is over the number of characters, it will be truncated to this length by \n  adding a two period ellipsis ('..') into the middle of the string.\n  Ex: a url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look like this: 'http://www...th/to/a/file'",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "twitter",
                            "description": "True if Twitter handles (\"@example\") should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "email",
                            "description": "True if email addresses should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "urls",
                            "description": "True if miscellaneous URLs should be automatically linked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The HTML text, with URLs automatically linked",
                "type": "String"
            },
            "class": "Autolinker"
        },
        {
            "file": "LADS/js/Autolinker.js-master/src/matcherRegexSource.js",
            "line": 1,
            "itemtype": "property",
            "name": "matcherRegex!~YUIDOC_LINE~!!~YUIDOC_LINE~!The regular expression that matches URLs, email addresses, and Twitter handles.!~YUIDOC_LINE~!!~YUIDOC_LINE~!Capturing groups:!~YUIDOC_LINE~!!~YUIDOC_LINE~!1. Group that is used to determine if there is a Twitter handle match (i.e. @someTwitterUser). Simply check for its existence!~YUIDOC_LINE~!   to determine if there is a Twitter handle match. The next couple of capturing groups give information about the Twitter !~YUIDOC_LINE~!   handle match.!~YUIDOC_LINE~!2. The whitespace character before the @sign in a Twitter handle. This is needed because there are no lookbehinds in JS regular!~YUIDOC_LINE~!   expressions, and can be used to reconstruct the original string in a replace().!~YUIDOC_LINE~!3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.!~YUIDOC_LINE~!4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full address.!~YUIDOC_LINE~!   Ex: 'me@my.com'!~YUIDOC_LINE~!5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.!~YUIDOC_LINE~!   This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor",
            "access": "private",
            "tagname": "",
            "type": "RegExp",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 37,
            "description": "Maximum levels of nesting that will be included when an object is pretty-printed",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 42,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 47,
            "description": "By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 62,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 126,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 134,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 144,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 154,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 164,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 175,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 187,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 197,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 211,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 226,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 271,
            "description": "The name of the spy, if provided.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 275,
            "description": "Is this Object a spy?",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 279,
            "description": "The actual function this spy stubs.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 284,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 293,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 307,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 323,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 342,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 361,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 381,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 427,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 437,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 455,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 465,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods",
                "type": "jasmine.Spy"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 485,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 503,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 516,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "jasmine.Matchers"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 530,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 540,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 551,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 563,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 575,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 587,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 607,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 646,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 651,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 659,
            "access": "private",
            "tagname": "",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 713,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 751,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 762,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 779,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 786,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 793,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1013,
            "is_constructor": 1,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1044,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1071,
            "is_constructor": 1,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1173,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1250,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1258,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1267,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1276,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1285,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1295,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1304,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1311,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1318,
            "description": "Matcher that compares the actual to null.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1325,
            "description": "Matcher that compares the actual to NaN.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1336,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1344,
            "description": "Matcher that boolean nots the actual.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1352,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1374,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1377,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1401,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1426,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1429,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1446,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1455,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1473,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision,",
                    "description": "as number of decimal places",
                    "type": "Number"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1487,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1664,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1760,
            "is_constructor": 1,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1795,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1801,
            "description": "The total count of results",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1805,
            "description": "Number of passed results",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1809,
            "description": "Number of failed results",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1813,
            "description": "Was this suite/spec skipped?",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1817,
            "ignore": "",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1823,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1834,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1842,
            "description": "Getter for the results: message & results.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1849,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1869,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1875,
            "description": "Base class for pretty printing for expectation results.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 1882,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2123,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2200,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2239,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2262,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2275,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2287,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2443,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js",
            "line": 2540,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/jscolor/jscolor.js",
            "line": 1,
            "description": "jscolor, JavaScript Color Picker",
            "version": "1.3.13",
            "license": "GNU Lesser General Public License, http://www.gnu.org/copyleft/lesser.html",
            "author": "Jan Odvarko, http://odvarko.cz",
            "created": "2008-06-15",
            "updated": "2012-01-19",
            "link": "http://jscolor.com",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 3,
            "description": "Enum of file upload types",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 13,
            "description": "Helper class for performing file uploads\nAlso creates HTML overlay that displays progress / spinning wheel\nNote: everything is handled internally, no external API, does its thing then removes itself and disappears",
            "params": [
                {
                    "name": "root",
                    "description": "Root of HTML, upload overlay will be appended to this while upload is running and removed when finished automatically!"
                },
                {
                    "name": "type",
                    "description": "Type of file upload (defined by FileUploadTypes)"
                },
                {
                    "name": "localCallback",
                    "description": "Callback passed local file info (args: <WinJS.StorageFile> file, <String> localURL)"
                },
                {
                    "name": "finishedCallback",
                    "description": "Callback to execute once upload is finished (standard args: <String> url; deepzoom args: <String> xmlDoq)"
                },
                {
                    "name": "filters",
                    "description": "Array of file types selectable by user"
                },
                {
                    "name": "useThumbs",
                    "description": "Use thumbnail view mode?"
                },
                {
                    "name": "progressFunc",
                    "description": "Function to keep track of progress (e.g. for displaying a progress bar somewhere)"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 88,
            "description": "Starts the file upload",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 434,
            "description": "Appends overlay to root\n(no idea if this will actually disable interactions too as is)",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 444,
            "description": "Totally remove the overlay from the DOM / destroy",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 451,
            "description": "Inner class that performs actual upload operation\nPartly taken from: http://msdn.microsoft.com/en-us/library/windows/apps/Hh700372.aspx",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 459,
            "description": "Starts upload of given file",
            "params": [
                {
                    "name": "uriString",
                    "description": "Spec passed to server"
                },
                {
                    "name": "file",
                    "description": "File object representing file to be uploaded"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 517,
            "description": "Called when upload is completed",
            "params": [
                {
                    "name": "uploadOperation",
                    "description": "Finished upload passed by background uploader"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 592,
            "description": "If file upload fails",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 630,
            "description": "Called by uploader as upload progresses",
            "params": [
                {
                    "name": "upload",
                    "description": "upload object / info"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js",
            "line": 667,
            "description": "copied from LADS.Util.UI because the boxes have crap CSS. tru fax.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/authoring/LADS.Authoring.NewSettingsView.js",
            "line": 2067,
            "description": "Uploads hotspot i to artwork j in its list of artworks to associate to.",
            "params": [
                {
                    "name": "i",
                    "description": "the index of the asset we're uploading"
                },
                {
                    "name": "j",
                    "description": "each asset has a list of artworks it'll be associated with; j is the index in this list"
                },
                {
                    "name": "len",
                    "description": "the length of the list above"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 53,
            "description": "Initiate artmode with a root, artwork image and a sidebar on the left.",
            "itemtype": "method",
            "name": "init",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 99,
            "description": "Add controls for manual Seadragon manipulation\nThis was written for testing purposes and was not carefully written\nDO NOT KEEP THIS AS IS!!!!!!",
            "itemtype": "method",
            "name": "createSeadragonControls",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 178,
            "description": "Makes the artwork viewer sidebar",
            "itemtype": "method",
            "name": "makeSidebar",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 686,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 699,
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 782,
            "description": "Create a drawer with a disclosure button used to display\nhotspots, assets, tours. The returned jQuery object has\na property called \"contents\" which should be used to add\nbuttons or messages to the contents of the drawer.",
            "params": [
                {
                    "name": "title,",
                    "description": "the display title for the drawer"
                }
            ],
            "author": "jastern",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 900,
            "description": "This is the click function LocationHistoryContainer.",
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 1395,
            "description": "Return art viewer root element",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "root jquery object",
                "type": "Object"
            },
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Artmode.js",
            "line": 1404,
            "description": "Make the map for location History.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "callback",
                    "description": "function to be called when map making is complete",
                    "type": "Function"
                }
            ],
            "class": "LADS.Layout.Artmode"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 136,
            "description": "Create a new right panel for editing Associated Media and append it to the dom (just offscreen)",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 469,
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 563,
            "description": "Refresh the view of available associated media in the sidebar.",
            "params": [
                {
                    "name": "$assetContainer",
                    "description": "(optional)    The container to append associated media buttons to.\n     If $assetContainer is not supplied, the container will be selected by the classname \n     \"assetContainer\""
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 672,
            "description": "Create a view into the specified media type",
            "params": [
                {
                    "name": "src",
                    "description": "URL for the desired resource"
                },
                {
                    "name": "type",
                    "description": "A string representing the type of file, currently supports 'Image', 'Video', and 'Audio'"
                }
            ],
            "return": {
                "description": "A jQuery element wrapping a view into the content"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 784,
            "description": "Initialize a reusible hotspot div and store it in the module variable $hotspotAnchor",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 860,
            "description": "Initialize the template required for displaying the Associated Media upload picker",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 974,
            "description": "Display Assoc. Media content in the right bar. The bar will animate out if it is hidden. \nDiscards any unsaved properties of the active content.",
            "params": [
                {
                    "name": "info",
                    "description": "Metadata object associated with the new content, including title and description"
                },
                {
                    "name": "content",
                    "description": "A dom element suitable for displaying the content"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1075,
            "description": "Update the content view in the right bar. Will not overwrite any existing properties for the active content.",
            "params": [
                {
                    "name": "info",
                    "description": "Metadata associated with this content"
                },
                {
                    "name": "content",
                    "description": "A dom element suitable for displaying the new content"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1108,
            "description": "Set a metadata value for the active media content.",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1118,
            "description": "Get metadata values for the active media content.",
            "params": [
                {
                    "name": "key",
                    "description": "(optional)   the key to retrieve. If key is not given, retrieve \n    the entire values object."
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1133,
            "description": "Generate a jQuery element suitable for use as an Assoc. Media upload picker\nShould be called after makeUploadTemplate()",
            "return": {
                "description": "a jQuery element with the class 'upload'"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1284,
            "description": "Execute a request to update or upload Hotspot data on the server.",
            "params": [
                {
                    "name": "info,",
                    "description": "an object with the following properties: title, desc, pos, contentType, \n     contentUrl, assetType, metadata (optional worktop info object)"
                },
                {
                    "name": "background",
                    "description": "is this upload going on in the background?"
                },
                {
                    "name": "index",
                    "description": "used for batch upload chaining"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js",
            "line": 1418,
            "description": "Hide the right panel with a slide out animation.",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js",
            "line": 3,
            "description": "This is the layout for entering from startpage to authoring mode.",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js",
            "line": 24,
            "description": "Change the view",
            "params": [
                {
                    "name": ":",
                    "description": "the selected section."
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 36,
            "description": "initiates UI stuff",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 255,
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 377,
            "description": "create send feedback",
            "return": {
                "description": ": feedbackContainer"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 528,
            "description": "Adds exhibitions to page",
            "params": [
                {
                    "name": ":",
                    "description": "exhibition to add\nCreates button in sidebar"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 670,
            "description": "Adds tour to page\nCreates button in sidebar",
            "params": [
                {
                    "name": ":",
                    "description": "tour to add,"
                },
                {
                    "name": ":",
                    "description": "all the tours"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 817,
            "description": "have a exhibition/tour selected",
            "params": [
                {
                    "name": ":",
                    "description": "index of selected exhibition"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 826,
            "description": "return to the exhibition when clicks back button from catalog",
            "params": [
                {
                    "name": ":",
                    "description": "current exhibition"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 866,
            "description": "return to tours page in exhibition mode when clicks back button from artmode.",
            "params": [
                {
                    "name": ":",
                    "description": "current artwork mode"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 904,
            "description": "Function to select the tour tab from a different page before switching to this page",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 911,
            "description": "When exhibition is selected in sidebar,\nthis function creates description to display in main display area",
            "params": [
                {
                    "name": ":",
                    "description": "selected exhibition"
                }
            ],
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1432,
            "description": "When a tour is selected in sidebar,\nthis function creates description to display in main display area\n-David C.",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1503,
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1539,
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1597,
            "description": "I comment out all the images\nvar img2 = $(document.createElement('img'));\nimg2.attr('src', tour.Metadata.DescriptionImage2);\nimg2.css({ \"width\": \"auto\", \"height\": \"60%\", \"float\": \"right\", 'margin-right': '5px', 'margin-left': '1%', 'margin-bottom': '1px' }); //height 73\nimg2.attr('id', 'img2');\ncontentdiv.append(img2);        contentdiv.append(img1); //append img1 second to preserve order\n        \ndescContainer.append(img2);",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1926,
            "description": "Function to add a related art to a tour at the bottom of the tour information section.  Takes the name of the tour to allow\nthe user to return to the appropriate tour when exiting artmode after entering it from the related art.",
            "return": {
                "description": ": related artworks"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 1988,
            "description": "add related tours to an exhibition in the exhibition information section.",
            "params": [
                {
                    "name": ":",
                    "description": "tourInfo"
                }
            ],
            "return": {
                "description": ": interactive tours to this exhibition"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 2036,
            "description": "switch the exhibition page to catalog/artmode",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 2050,
            "description": "switch player when currently in a tour page in exhibition",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.Exhibitions.js",
            "line": 2077,
            "description": "Function for reflowing page based on orientation / for splitscreen",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.InternetFailurePage.js",
            "line": 34,
            "description": "Sets up internet failure page (handlers, etc) using the input errorType",
            "itemtype": "method",
            "name": "init",
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.InternetFailurePage.js",
            "line": 143,
            "description": "Returns a notice message given a certain connectivity error.",
            "itemtype": "method",
            "name": "getNoticeText",
            "params": [
                {
                    "name": "error",
                    "description": "the error type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an error message to be displayed",
                "type": "String"
            },
            "class": "LADS.Layout.InternetFailurePage.js"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js",
            "line": 86,
            "description": "initiates UI stuff",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js",
            "line": 222,
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js",
            "line": 263,
            "description": "Adds exhibitions to page",
            "params": [
                {
                    "name": ":",
                    "description": "exhibition to add\nCreates button in sidebar"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.NewCatalog.js",
            "line": 340,
            "description": "When exhibition is selected in sidebar,\nthis function creates description to display in main display area",
            "params": [
                {
                    "name": ":",
                    "description": "selected exhibition"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 36,
            "description": "Test internet and server connections",
            "params": [
                {
                    "name": "options",
                    "description": "Object\n           internetURL     url of alternate site against which we'll test connectivity"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 87,
            "description": "sets up the entire visual layout and images of the splash screen",
            "itemtype": "method",
            "name": "loadHelper",
            "params": [
                {
                    "name": "main",
                    "description": "contains all image paths and museum info",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 194,
            "description": "isBrowserCompatible\n\nReturns true if the browser is compatible with TAG,\nfalse if it isn't",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 229,
            "description": "getBrowserVersion\n\nReturn's browser name followed by version\ne.g. \"Chrome 34.0.1847.116\"",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 250,
            "description": "adjusts the text to fit the screen size",
            "itemtype": "method",
            "name": "fixText",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 268,
            "description": "initializes the handlers for various 'click' functions including setting up a server",
            "itemtype": "method",
            "name": "initializeHandlers",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 287,
            "description": "gets the paths for all the images displayed on the splash screen",
            "itemtype": "method",
            "name": "setImagePaths",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the image links",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 319,
            "description": "Sets up the credits box with its content including text and images. Also includes function for animation of credits.",
            "itemtype": "method",
            "name": "setUpCredits",
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 357,
            "description": "animation of credits when user clicks",
            "itemtype": "method",
            "name": "expandInfo",
            "params": [
                {
                    "name": "event",
                    "description": "the trigger event for animation, in this case a click",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 392,
            "description": "sets up the info div which contains all the museum information",
            "itemtype": "method",
            "name": "setUpInfo",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the museum information",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 415,
            "description": "Fills in all museum info including name and location",
            "itemtype": "method",
            "name": "setUpMuseumInfo",
            "params": [
                {
                    "name": "main",
                    "description": "contains all the museum information",
                    "type": "Object"
                }
            ],
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.StartPage.js",
            "line": 461,
            "itemtype": "method",
            "name": "getRoot",
            "return": {
                "description": "the root of the splash screen DOM"
            },
            "class": "LADS.Layout.StartPage"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js",
            "line": 3,
            "description": "Final layout for Tour Authoring\nAll parts of layout are container in separate files/classes\nLayout file also contains testing instructions / notes / functions",
            "params": [
                {
                    "name": "tourobj",
                    "description": "Doq containing tour info"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback to run once tour has loaded (loadRin runs async)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js",
            "line": 41,
            "description": "Second row on screen, contains ComponentControls and Viewer",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js",
            "line": 164,
            "description": "Creates components and sets up UI",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.TourPlayer.js",
            "line": 3,
            "description": "Player for RIN tours",
            "params": [
                {
                    "name": "tour",
                    "description": "RIN tour in Javascript object (pre-parsed from JSON)"
                },
                {
                    "name": "exhibition",
                    "description": "exhibition we came from (if any) (doq object)"
                },
                {
                    "name": "prevInfo",
                    "description": "object containing previous page info \n   artworkPrev      value is 'artmode' when we arrive here from the art viewer\n   prevScroll       value of scrollbar from new catalog page"
                },
                {
                    "name": "artwork",
                    "description": "options to pass into LADS.Layout.Artmode"
                },
                {
                    "name": "tourObj",
                    "description": "the tour doq object, so we can return to the proper tour in the collections screen"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/layout/LADS.Layout.VideoPlayer.js",
            "line": 3,
            "description": "Player for RIN tours",
            "params": [
                {
                    "name": "tour",
                    "description": "RIN tour in Javascript object (pre-parsed from JSON)"
                },
                {
                    "name": "exhibition:",
                    "description": ""
                },
                {
                    "name": "prevInfo",
                    "description": "object containing previous page info \n   artworkPrev      value is 'artmode' when we arrive here from the art viewer\n   prevScroll       value of scrollbar from new catalog page"
                },
                {
                    "name": "artwork:the",
                    "description": "artworks in this tour"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ArtworkTrack.js",
            "line": 3,
            "description": "Creates an Artwork track",
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);",
                    "props": [
                        {
                            "name": "thumbnail",
                            "description": ""
                        }
                    ]
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.AudioTrack.js",
            "line": 3,
            "description": "Creates an Audio track",
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Command.js",
            "line": 3,
            "description": "Interface representing an action taken by the user\nStored in the undo/redo stack, used for multi-level undo/redo",
            "params": [
                {
                    "name": "spec",
                    "description": "An object with the following keys:\n                     execute: Function to execute the command\n                     unexecute: Function to undo the command"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 6,
            "description": "Controls for adding Components, editing properties of them, and undo/redo buttons",
            "params": [
                {
                    "name": "spec",
                    "description": "root, timeline, timeManager attr"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 48,
            "description": "Display warning message if ink cannot be loaded",
            "params": [
                {
                    "name": "displayString",
                    "description": "String describing error (to be displayed)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 112,
            "description": "Method called when \"Edit Ink\" is clicked on a draw-type ink track.\nCreates a new InkController and loads in the datastring of the track.\nShows the edit draw controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring (see InkController.js for format)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 380,
            "description": "Method called when \"Edit Ink\" is clicked on a block/isolate-type ink track.\nSee comments for showEditDraw.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring"
                },
                {
                    "name": "trans_type",
                    "description": "'isolate' or 'block'"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 662,
            "description": "Method called when \"Edit Ink\" is clicked on a text-type ink track.\nSee comments for showEditDraw.",
            "params": [
                {
                    "name": "track",
                    "description": "the ink track in question"
                },
                {
                    "name": "datastring",
                    "description": "the track's ink datastring"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 936,
            "description": "Modified By: Hak",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 944,
            "description": "Add parts of function panel",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1045,
            "description": "Opens the correct file picker based on the file type",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1253,
            "description": "Creates component menu buttons",
            "params": [
                {
                    "name": "title",
                    "description": "Name of button"
                },
                {
                    "name": "component",
                    "description": "DOM element to add button to"
                }
            ],
            "return": {
                "description": "addComponentButton     the button created."
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1539,
            "description": "Called when all artworks/images are deleted; disables ink functionality by graying out \"Ink\" button",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1570,
            "description": "\"Add Component\" button click handler.\nAllows user to drop menus and exit out of menus by clicking elsewhere.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1658,
            "description": "Hover colors for \"Add Component\" menu items",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1666,
            "description": "Creates catalog picker for associated media related to the artwork already imported into the tour (Jessica Fu)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 1742,
            "description": "Get associated media for all artworks in the tour from the server.\nCreates the media picker dom elements.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 2170,
            "description": "Creates the media panel for the media associated to a given artwork. Each is given a .mediaHolder-class container.",
            "params": [
                {
                    "name": "mediaArray",
                    "description": "the list of media to appear in the panel"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 2357,
            "description": "Gets artwork from server, displays catalogPicker",
            "return": {
                "description": "artwork id"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 2873,
            "description": "Detach catalog dom elements",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 2885,
            "description": "Below are the ink UI controls. They are separated into draw, text, and transparency controls.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 2891,
            "description": "Ink text UI controls (initial text creation, not edit mode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 3191,
            "description": "Edit ink text UI controls -- we can probably compress some of this by reusing the inkTextControls",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 3516,
            "description": "Ink draw UI controls (for initial draw authoring, not editing mode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 3845,
            "description": "Edit draw controls (edit mode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4162,
            "description": "Ink transparency controls (initial authoring, not editing mode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4337,
            "description": "Edit transparency controls (edit mode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4496,
            "description": "Below are some helper function for the creation of ink controls above",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4500,
            "description": "Allows you to click to close ink, edit ink controls (e.g. opacity sliders by clicking on labels).\nClicking on a label will collapse all other controls and show the selected control if it was hidden, hide it if it was shown.",
            "params": [
                {
                    "name": "array",
                    "description": "the array of controls containing the control we are clicking on"
                },
                {
                    "name": "show",
                    "description": "the control we are clicking on -- we toggle it to be shown or hidden"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4529,
            "description": "Collapses all controls in a given panel",
            "params": [
                {
                    "name": "array",
                    "description": "this is the array of controls to collapse (e.g. drawArray)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4539,
            "description": "Initialize the text controls with default values",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4554,
            "description": "Initialize the transparency controls with default values",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4569,
            "description": "Initialize the draw controls with default values",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4599,
            "description": "Create attach and create as unlinked buttons for ink creation",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4709,
            "description": "Sets display:none for each of the ink control panels",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4722,
            "description": "Removes the current ink canvas if there is one",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4735,
            "description": "Creates an ink canvas",
            "return": {
                "description": "a div on which we'll create a Raphael paper"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4764,
            "description": "Appends the functions panel to the inputted container element",
            "params": [
                {
                    "name": "container",
                    "description": "element to which we'll append the functions panel"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js",
            "line": 4773,
            "description": "Adds the catalog overlays (for artwork and associated media import) to the inputted container element\nUsed in TourAuthoringNew",
            "params": [
                {
                    "name": "container",
                    "description": "element to which we'll append the functions panel"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Constants.js",
            "line": 4,
            "description": "List of constants used across multiple files and locations",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 10,
            "description": "Makes a display\nRepresents region of time where media is playing\nMaps to Keyframe Sequence in RIN\nContains and manages keyframes added to sequence",
            "params": [
                {
                    "name": "spec",
                    "description": "Params: start, length, fadeIn, fadeOut (all time values in seconds), id"
                },
                {
                    "name": "my",
                    "description": "Update currentDisplay for touch handling, contains timeManager, undoManager, svg, update"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 167,
            "description": "Bound to mousedown on display parts\nSets currentDisplay for use by displayClick\nResets currentDisplay on mouseup",
            "params": [
                {
                    "name": "mouseoffset",
                    "description": "offset of mouse on element clicked for accurate dragging (offset from start of the timeline)"
                },
                {
                    "name": "mouseloc",
                    "description": "LADS.TourAuthoring.DisplayParts enum type specifying which part of display was clicked"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 503,
            "description": "Bound to mousedown on display parts\nSets currentDisplay for use by displayClick\nResets currentDisplay on mouseup",
            "params": [
                {
                    "name": "mouseoffset",
                    "description": "offset of mouse on element clicked for accurate dragging (offset from start of the timeline)"
                },
                {
                    "name": "mouseloc",
                    "description": "LADS.TourAuthoring.DisplayParts enum type specifying which part of display was clicked"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 739,
            "description": "Sets up menu with correct inputs and buttons",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1020,
            "description": "Removes the display.",
            "params": [
                {
                    "name": "acted",
                    "description": "whether the user directly removed the display / if a command should be logged."
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1117,
            "return": {
                "description": "Start of display block in sec"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1125,
            "return": {
                "description": "End of display block in sec"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1174,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1223,
            "description": "these are helper methods for msMove to reset the graphic info.\ncalled when you are changing the fadein",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1296,
            "description": "Special setter that sets new start but preserves lengths",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1312,
            "return": {
                "description": "Numerical ID of display"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1336,
            "return": {
                "description": "Track that the display is in"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1390,
            "description": "Logic for manipulation + dragging of displays\nMoves display to an absolute position given in res\ncurrentDisplay, offset, loc should be set, see _initSVG / _displayMousedown for details\nCurrently three different types of move, determined by loc variable\n1. loc === 'main': translates the entire display, preserves length\n2. loc === 'fade-in' or 'fade-out': drags only fade-in / fade-out region, start of other fade and lengths of fades remaines fixed, length of main area changes",
            "params": [
                {
                    "name": "res",
                    "description": "event from makeManipulable, onManipulate"
                },
                {
                    "name": "leftbound",
                    "description": "leftmost position display can move to in seconds (not required)"
                },
                {
                    "name": "rightbound",
                    "description": "rightmost position display can move to in seconds (not required)"
                },
                {
                    "name": "displayIn",
                    "description": "the position of a nearby display in the previous trac"
                },
                {
                    "name": "displayOut",
                    "description": "the position of a nearby display in the next track"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1532,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1556,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1588,
            "description": "Returns the length of the longest total collection of subdisplays",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1604,
            "description": "Gets the attached ink displays residing within the bounds of the current display",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1879,
            "description": "Gets the art display enclosing an attached ink track display.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 1902,
            "description": "Accepts a display that should be clamped to the current display (i.e. if it sticks out, move it in)",
            "params": [
                {
                    "name": "disp",
                    "description": "the display to clamp"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2017,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2164,
            "description": "Used to debug move from command line\nFlips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2188,
            "description": "Helper function for moving all keyframes when whole display is dragged",
            "params": [
                {
                    "name": "translate",
                    "description": "Amount (in time) to move keyframes by"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2202,
            "description": "Resets positioning and size of display\nCalled after zoom or scaling",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2230,
            "description": "Adds a keyframe to the display / sequence",
            "params": [
                {
                    "name": "x",
                    "description": "x location in px"
                },
                {
                    "name": "y",
                    "description": "y location in px"
                },
                {
                    "name": "capture",
                    "description": "whether the keyframe should immediately capture the state of the player"
                }
            ],
            "return": {
                "description": "keyframe%A"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2311,
            "description": "Function to remove keyframe from keyframe array",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2331,
            "description": "Sorts the keyframe array\nMust be called after a keyframe is moved, as keyframes can change order",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2345,
            "description": "Used for passing last state of display on to next display",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2353,
            "description": "Get keyframes belonging to display\nUsed for finding bounds of keyframe movement",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2362,
            "description": "Helper function for keeping keyframes sorted\nSorted in ascending order by x position (in time)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2384,
            "description": "Converts Display to Experience Stream",
            "params": [
                {
                    "name": "data",
                    "description": "new ES is inserted into this object"
                },
                {
                    "name": "type",
                    "description": "type header identifying the type of ES / media"
                },
                {
                    "name": "passthrough",
                    "description": "whether this ES (layer) can be manipulated"
                },
                {
                    "name": "prevState",
                    "description": "final keyframe from previous display, defines start state for this display"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2449,
            "description": "Helper function for collecting RIN data of associated keyframes",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js",
            "line": 2522,
            "description": "Constructs Screenplay entry from display\nReturns object with begin, xml params so entries can be sorted",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 16,
            "description": "Menu for track, display and keyframe editing",
            "params": [
                {
                    "name": "spec.type",
                    "description": "value from MenuType enum specifying menu layout"
                },
                {
                    "name": "my",
                    "description": "track's shared my object"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 31,
            "description": "Contains one object for every input in the menu\nInput objects have parameters:",
            "params": [
                {
                    "name": "input",
                    "description": "The actual HTML input element"
                },
                {
                    "name": "format",
                    "description": "Format of input, value from MenuInputFormats enum"
                },
                {
                    "name": "accessCallback",
                    "description": "Function for obtaining current value of linked variable"
                },
                {
                    "name": "updateCallback",
                    "description": "Function for updating value of linked variable"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 45,
            "description": "Initializes menu html",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 152,
            "description": "Opens menu",
            "params": [
                {
                    "name": "evt",
                    "description": "evt from interaction event, used to reposition menu"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 219,
            "description": "Close menu\nDoesn't fire if menuCloseable is set\nCall only from my.root close handler",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 229,
            "description": "Actually closes menu, no menuCloseable check\nCall everywhere except my.root handler",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 264,
            "description": "Adds an input element to the menu",
            "params": [
                {
                    "name": "name",
                    "description": "Name of element (appears on menu)"
                },
                {
                    "name": "format",
                    "description": "MenuInputFormat type"
                },
                {
                    "name": "accessCallback",
                    "description": "Function for obtaining current value of linked variable"
                },
                {
                    "name": "updateCallback",
                    "description": "Function for updating value of linked variable"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 341,
            "description": "Adds text w/ no related input or button",
            "params": [
                {
                    "name": "title",
                    "description": "Text to appear"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 362,
            "description": "Adds button to screen (click to fire)",
            "params": [
                {
                    "name": "title",
                    "description": "Test to appear in button"
                },
                {
                    "name": "floatPos",
                    "description": "Side of screen to float to"
                },
                {
                    "name": "callback",
                    "description": "Function to fire when clicked"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 413,
            "description": "Updates linked variable with new value in input",
            "params": [
                {
                    "name": "inputObj",
                    "description": "Input to update"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 470,
            "description": "Resets inputs to match current state of associated variables",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 481,
            "description": "Updates position of menu and brings it on-screen",
            "params": [
                {
                    "name": "evt",
                    "description": "Interaction event object"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 526,
            "description": "Performs input validation",
            "params": [
                {
                    "name": "inputstr",
                    "description": "string to check"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 551,
            "description": "Converts string to number according to input format type",
            "params": [
                {
                    "name": "valuestr",
                    "description": "new value in string form"
                },
                {
                    "name": "format",
                    "description": "MenuInputFormat value specifying input format"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 580,
            "description": "Converts value (typically from accessCallback) to string\nto place in input HTML element",
            "params": [
                {
                    "name": "value",
                    "description": "Value as number"
                },
                {
                    "name": "format",
                    "description": "MenuInputFormat type specifying format to parse number to"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js",
            "line": 608,
            "description": "Round number to have only\nLADS.TourAuthoring.Constants.menuDecimals decimal places",
            "params": [
                {
                    "name": "num",
                    "description": "number to round"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ImageTrack.js",
            "line": 3,
            "description": "Creates an Image track",
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);",
                    "props": [
                        {
                            "name": "thumbnail",
                            "description": ""
                        }
                    ]
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 16,
            "description": "Back-end for ink authoring and editing. Instances are created in ComponentControls and InkES. In\nComponentControls, we need the ability to author and edit inks. In InkES, we need them to follow\nartworks.\nUses the RaphaelJS library for svg manipulation.",
            "params": [
                {
                    "name": "canvId",
                    "description": "the id of the div to which we'll assign the Raphael canvas."
                },
                {
                    "name": "html_elt",
                    "description": "in the case that the div above is not in the dom yet, send in a variable for its html element."
                },
                {
                    "name": "calling_file",
                    "description": "either 'inkes' or not; slightly different functionality is needed in different instances."
                },
                {
                    "name": "spec",
                    "description": "if the calling file is ComponentControls, we make use of the undoManager etc, so just pass\n                     in the spec variable from ComponentControls."
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 150,
            "description": "Sets ink params to defaults",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 180,
            "description": "Helper function to parse and multiply dimensions.",
            "params": [
                {
                    "name": "rel_coord",
                    "description": "the relative coordinate we want to convert to absolute coordinates"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant dimension of the canvas used for scaling"
                }
            ],
            "return": {
                "description": "the absolute coordinate"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 191,
            "description": "Takes an ellipse or rectangle and adds styling, drag events, drag handles to it.",
            "params": [
                {
                    "name": "elt",
                    "description": "the svg element"
                },
                {
                    "name": "others",
                    "description": "styling to apply to elt"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1019,
            "description": "Add an ellipse to the Raphael canvas. Called by the \"Add Ellipse\" button in isolate/block ink mode",
            "params": [
                {
                    "name": "cx,",
                    "description": "cy    the coordinates of the center of the ellipse"
                },
                {
                    "name": "rx,",
                    "description": "ry    the radii of the ellipse"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1046,
            "description": "DEPRECATED\nUsed to give style and drag functionality to old marquees (such as is currently in the Final\nGaribaldi Demo). Once all old marquees have been deleted from tours, this method can be tossed.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1052,
            "description": "analogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1188,
            "description": "Add a rectangle to the Raphael canvas. Called by the \"Add Rectangle\" button in isolate/block ink mode",
            "params": [
                {
                    "name": "x,",
                    "description": "y    the coordinates of the top left corner of the rectangle"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1215,
            "description": "Add a text box (a textarea html element) for creating text inks.",
            "params": [
                {
                    "name": "x,",
                    "description": "y     coordinates of the text box (absolute)"
                },
                {
                    "name": "str",
                    "description": "any text that should be loaded into the text box (i.e. for editing inks)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1291,
            "description": "Pans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1352,
            "description": "Pans and resizes the ink canvas to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1438,
            "description": "Convert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path to reverse"
                }
            ],
            "return": {
                "description": "reversed path (with outer path)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1494,
            "description": "Construct the path that models the overlap between new_path and existing_path in the appropriate\ntransparency mode. For example, if the paths are intersecting circles, const_path_alg returns the\noutline of the two; if one path is completely inside the other, the inner one is returned in isolate\nmode and the outer is returned in block mode. Both input paths are closed (have a trailing 'z').",
            "params": [
                {
                    "name": "new_path",
                    "description": "one path"
                },
                {
                    "name": "existing_path",
                    "description": "another path (in the scheme of things, we are building this path up by adding new_paths)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1700,
            "description": "Uses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1753,
            "description": "A helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1793,
            "description": "Called if we drag on the ink canvas in eraser mode. Finds endpoints in the current paths close\nto the drag event location and splices them out of the path array.",
            "params": [
                {
                    "name": "location",
                    "description": "the locaton of the drag event"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1830,
            "description": "Takes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring"
                },
                {
                    "name": "attr",
                    "description": "the attribute we'll parse for"
                },
                {
                    "name": "parsetype",
                    "description": "'i' (int), 's' (string), or 'f' (float)"
                }
            ],
            "return": {
                "description": "the value of the attribute in the correct format"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1859,
            "description": "Returns the isolate/block bounding shapes.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1867,
            "description": "Returns the current datastring.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1875,
            "description": "Uses path data representing ellipses and rectangles to get the path representing the ultimate block\nor isolate shape.",
            "params": [
                {
                    "name": "paths",
                    "description": "array of path strings representing ellipses/rects"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1911,
            "description": "Helper function to get artwork's relative coordinates within the viewer.",
            "return": {
                "description": "an object containing relative coordinates x, y, w, h"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1920,
            "description": "Helper function to get the svg element created by Raphael.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1928,
            "description": "Searches the current datastring for ellipses and rectangles, stores their information in bounding_shapes.\nAlso stores their coordinates and types in an array shapes and calls shapes_to_paths on shapes\nto transform them to path format.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1978,
            "description": "Returns true if the text box containing an ink being edited/authored is empty",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 1986,
            "description": "Helper function to check if there is actually a valid ink to attach/save during ink authoring/editing. For texts, need to use isTextboxEmpty.",
            "params": [
                {
                    "name": "datastring",
                    "description": "the datastring to check"
                }
            ],
            "return": {
                "description": "whether or not there are no inks on the canvas (i.e. the datastring does not represent anything useful)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2018,
            "description": "Display warning message if ink cannot be loaded",
            "params": [
                {
                    "name": "displayString",
                    "description": "String describing error (to be displayed)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2030,
            "description": "Checks if currently inside display",
            "return": {
                "description": "true if in display, false otherwise"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2051,
            "description": "Helper function to do some preprocessing on text inks before linking them.",
            "return": {
                "description": "true if we should proceed to linking, false if there are warning messages"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2089,
            "description": "Helper function to do some preprocessing on text inks before creating them unattached.",
            "return": {
                "description": "true if no warnings and we should create, false otherwise"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2104,
            "description": "Helper function to do some preprocessing on transparencies before linking them.",
            "return": {
                "description": "true if no warnings, false otherwise (see link_text for description of warnings)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2137,
            "description": "Helper function to do some preprocessing on transparencies before creating them unattached.",
            "return": {
                "description": "true if no warnings, false otherwise"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2152,
            "description": "Function to link an ink to an artwork. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if linking was successful, false if warnings",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2259,
            "description": "Function to create an unattached ink. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if creation was successful, false if warnings",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2356,
            "description": "Loads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "params": [
                {
                    "name": "the",
                    "description": "datastring to be loaded (see update_datastring for datastring format)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2524,
            "description": "Draws a transparency to the canvas and adds the correct styling. Also sets trans_currpath, which keeps track of current transparency path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path representing the transparency to be loaded in"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2538,
            "description": "Loads a transparency's bounding shapes -- type boundrect and boundellipse -- for editing transparencies",
            "params": [
                {
                    "name": "datastr",
                    "description": "the datastring containing the transparency path and its bounding shapes"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2600,
            "description": "DEPRECATED -- constructor for old marquees",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2612,
            "description": "Using the point pt, computes the incoming bezier anchor coordinates for the next point (next) in the path.\nThis is done by using the points' types (if pt and next are both endpoints, pt.point.ax2, .ay2 give the relevant information, etc).",
            "params": [
                {
                    "name": "pt",
                    "description": "starting point object (contains point coordinates, type of point, and which path it's on)"
                },
                {
                    "name": "next",
                    "description": "next point object"
                }
            ],
            "return": {
                "description": "the incoming bezier anchor coordinates to next"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2647,
            "description": "Helper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2655,
            "description": "Using the point next, computes the outgoing bezier anchor coordinates for the point pt on the path.",
            "params": [
                {
                    "name": "pt",
                    "description": "starting point object (contains point coordinates, type of point, and which path it's on)"
                },
                {
                    "name": "next",
                    "description": "next point object"
                }
            ],
            "return": {
                "description": "the outgoing bezier anchor coordinates from pt"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2676,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2767,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2796,
            "description": "Sometimes points on the boundary of a shape do not register as being inside the shape, so check a few surrounding\npoints as well. If enough of them (2) are inside, call the point inside. This isn't bulletproof, but it should\nwork most of the time.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path whose boundary concerns us"
                },
                {
                    "name": "x,",
                    "description": "y    coordinates of the point to test"
                }
            ],
            "return": {
                "description": "1 if enough points are inside, 0 otherwise"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2816,
            "description": "Helper function to convert to relative coordinates.",
            "params": [
                {
                    "name": "abs_coord",
                    "description": "the absolute coordinate"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant canvas dimension to scale by"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2826,
            "description": "Returns 1 if any points in order_added match pt.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2839,
            "description": "Removes all Raphael elements from the canvas and clears arrays",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2854,
            "description": "Resizes all elements in the ink canvas.",
            "params": [
                {
                    "name": "scale_x,",
                    "description": "scale_y   the scale factors to resize by"
                },
                {
                    "name": "draw",
                    "description": "should we take the time to draw the result?"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2943,
            "description": "Set the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2967,
            "description": "-     * Checks whether two points are effectively the same\n     * @param pt1, pt2   the points in question\n     * @param err        how close the points have to be to be considered the same\n     * @return    whether or not the points are the same (true/false)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 2980,
            "description": "Helper function to convert a textbox to a Raphael text element. //========== should be deprecated",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3004,
            "description": "Setter for the artname of a linked ink's associated artwork",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3012,
            "description": "Set the svg element to handle all pointer events so we can draw on it\n(and also to prevent manipulation of artwork during ink creation)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3024,
            "description": "Setter (sets experience id of ink)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3032,
            "description": "Sets the initial artwork keyframe",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3040,
            "description": "Sets the ink mode",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3049,
            "description": "Sets the internal reference to the old opacity of the ink track",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3057,
            "description": "Similar to the retrieveOrigDims function, but uses a proxy variable.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3084,
            "description": "Similar to add_attributes, gives text boxes drag functionality, drag handles, and undo/redo functionality.",
            "params": [
                {
                    "name": "textbox",
                    "description": "the text box in question"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3216,
            "description": "Takes transparency bounding shapes and converts them to bezier paths",
            "params": [
                {
                    "name": "shapes",
                    "description": "array of shapes to convert"
                }
            ],
            "return": {
                "description": "array of corresponding paths"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3255,
            "description": "Debugging function; prints out the ink path in our ink track",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3268,
            "description": "Scales a path representing a transparency/marquee.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path whose coordinates we'll scale"
                },
                {
                    "name": "trans_factor_x",
                    "description": "scale factor in x-direction"
                },
                {
                    "name": "trans_factor_y",
                    "description": "scale factor in y-direction"
                }
            ],
            "return": {
                "description": "scaled path"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3304,
            "description": "Returns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "return": {
                "description": "up to date datastring"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3382,
            "description": "When we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring loaded"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3418,
            "description": "The following are setters for various ink parameters",
            "params": [
                {
                    "name": "_",
                    "description": "the value to be set to the corresponding ink parameter"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3485,
            "description": "The following are getters for different ink parameters.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js",
            "line": 3520,
            "description": "The following are essentially setters, but they take in an id, grab the\nvalue of the dom element with that id, and set the correct variable accordingly",
            "params": [
                {
                    "name": "id",
                    "description": "the id of the dom element whose value we want to use"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js",
            "line": 20,
            "description": "definition of the inkAuthoring class members:\n  paper -- a Raphael object (a canvas to draw on) fit to the div specified by canvasId\n  loadInk -- loads an Ink to the canvas using the string format specified in update_datastring() below\n  getters and setters for different Ink attributes\n  update functions which take in DOM element IDs and use the settings stored in their values",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js",
            "line": 165,
            "description": "analogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkTrack.js",
            "line": 18,
            "description": "Creates an Ink track",
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details)\"\n               Additional parameters:\n               -- media is ink type\n               -- inkSpec is a spec object w/ ink details\n                   'text'; optional params 'font', 'pt' for text\n                   'drawing' for draw\n                   'shape', 'position' (x,y,w,h); optional params 'opacity' for others"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkablePart.js",
            "line": 3,
            "description": "Mix-in / part adding Inkability to tracks - currently not used",
            "params": [
                {
                    "name": "that",
                    "description": "the object you want to add inkability to"
                },
                {
                    "name": "my",
                    "description": "shared & protected variables\n                 'assets' parameter (array) will be added"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 3,
            "description": "Makes a keyframe\nAssociated with a display (keyframe sequence)\nMaps to keyframe in RIN (duh)",
            "params": [
                {
                    "name": "spec",
                    "description": "location (loc - x,y if audio, just x if visual), keyframe svg group (gkey) attrs"
                },
                {
                    "name": "my",
                    "description": "Update currentKeyframe param for touch handling, contains timeManager, undoManager, and svg"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 213,
            "description": "Helper function to set currentKeyframe and other vars in prep for movement",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 388,
            "description": "functions for changing keyframe style based on selected status",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 486,
            "description": "Sets keyframe volume",
            "params": [
                {
                    "name": "newvolume",
                    "description": "new volume in percent"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 521,
            "description": "Logic for manipulation + dragging of keyframes\nMoves keyframe to an absolute position given in res\ncurrentKeyframe and offsets should be set, see initSVG / _keyframeMousedown for details\nAutomatically bounds keyframe movement to associated display",
            "params": [
                {
                    "name": "res",
                    "description": "event from makeManipulable, onManipulate"
                },
                {
                    "name": "leftbound",
                    "description": "leftmost position keyframe can move to (not required)"
                },
                {
                    "name": "rightbound",
                    "description": "rightmost position keyframe can move to (not required)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 575,
            "description": "Used to debug move from command line\nFlips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 599,
            "description": "Translates keyframe by t secs",
            "params": [
                {
                    "name": "t",
                    "description": "amount of translation"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 617,
            "description": "Called when ratio of time to pixels is changed\nJust resets positioning of keyframes",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 632,
            "description": "Converts the y location of the keyframe onto scale from 0 to 1\n0 is bottom of timeline, 1 is top\nScale is linear\nUsed for audio keyframes only",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 642,
            "description": "Maps keyframe to RIN keyframe",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js",
            "line": 690,
            "description": "Initializes keyframe using RIN data",
            "params": [
                {
                    "name": "data",
                    "description": "keyframe in RIN xml format"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js",
            "line": 3,
            "description": "Component menu at the bottom of the screen\nContains controls for playing and seeking tour",
            "params": [
                {
                    "name": "spec",
                    "description": "timeManager attr undoManager"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js",
            "line": 632,
            "description": "HK25: Wrote this function for updating the slider box as it is moved.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 3,
            "description": "UI Tests:\nDrag playhead and playback location fader TODO: test ensuring RIN and playhead are synced\nClick \"Play\" button twice (start and stop)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 9,
            "description": "Automated tests module for TourAuthoring",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 31,
            "description": "Makes a bunch of tracks and displays and keyframes and adds them to the DOM",
            "params": [
                {
                    "name": "timeline",
                    "description": ""
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 83,
            "description": "Makes two tracks w/ alternating display regions and calls onUpdate on the timeline",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 104,
            "description": "Material for demo",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 157,
            "description": "Dumb + fast test of viewer updating using pre-coded TAGTest narrative",
            "params": [
                {
                    "name": "viewer",
                    "description": ""
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 165,
            "description": "Testing JSON RINdata + server send/recieve",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 182,
            "description": "Test creating tours",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 191,
            "description": "Test modification of Name, Content, and Thumbnail fields\nThese are the only fields Tour Authoring needs to worry about",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 209,
            "description": "Test deletion",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js",
            "line": 216,
            "description": "Hack to get audio loaded for editing",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 3,
            "description": "Manages all time-related things in TourAuthoring\nStores info re: start/end, current time, scale\nScale converts between time space (seconds) and pixel space (pixels on timeline)\nDispatches events to subscribers on time changes\nAll time values stored as seconds",
            "params": [
                {
                    "name": "spec",
                    "description": "start, end, scale, current parameters, all integers, all in seconds (not required)"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 43,
            "description": "Generally should use setTime once everything has been initialized:\nSpec object contains any of start, end, scale properties\nAll time-dependent text in DOM is updated as well to reflect changes",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 135,
            "description": "Get state from viewer",
            "params": [
                {
                    "name": "isReady",
                    "description": "whether the tour can play"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 158,
            "description": "Drives forward current time to mimic playback",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 201,
            "description": "Stops playback if time manager is playing",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 214,
            "description": "Functions for converting btw pixel space and time space",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 245,
            "description": "Grab current time in editor using playhead position",
            "return": {
                "description": "Current time (in time-space)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 262,
            "description": "Grab current time as percent complete of tour",
            "return": {
                "description": "Current time (as percentage)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 271,
            "description": "Gets description of current duration",
            "return": {
                "description": "Object w/ start, end, scale parameters"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 282,
            "description": "Add an event handler to be called on updating of current time (during playback or seek)",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever current time is updated"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 291,
            "description": "Dispatches events to subscribers on seek update (private)\nContext is set as time object",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 303,
            "description": "Add an event handler to be called on updating of duration",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever start, end, or scale is updated"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 312,
            "description": "Dispatches events to subscribers on duration update (private)\nContext is set as time object",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: start, end, scale parameters (for easy access)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 324,
            "description": "Add an event handler to be called on play() / when it is called\nWill only be called once",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 334,
            "description": "Dispatches events to subscribers on play (private)",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 345,
            "description": "Add an event handler to be called during player interval updates",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 354,
            "description": "Dispatches events to subscribers on play updates (private)\nContext is set as time object",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 366,
            "description": "Add an event handler to be called on stop",
            "params": [
                {
                    "name": "handler",
                    "description": "Event Handler to be called whenever stop() is called"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 375,
            "description": "Dispatches events to subscribers on play (private)\nContext is set as time object",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: no use at the moment"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 387,
            "description": "Add an event handler to be called on move (either play or seek)\nExecutes before other actions in play or seek, allowing safe updates",
            "params": [
                {
                    "name": "handler",
                    "description": "Event handler to be called whenever play() or seek() is called"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js",
            "line": 397,
            "description": "Dispatches events to subscribers on move (private)\nContext is set as time object",
            "params": [
                {
                    "name": "ev",
                    "description": "The event: current, percent parameters"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 3,
            "description": "Manages user editing of tracks",
            "params": [
                {
                    "name": "spec",
                    "description": "timeManager, undoManager, viewer params"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 324,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 443,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 875,
            "description": "get the limiting distance for multi select",
            "return": {
                "description": "bound: the array of the smallest distances"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 912,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 913,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 932,
            "description": "turn of the button for multi select",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 950,
            "description": "update the olddata for each selected displays when the mouse goes up\nthis is used in undo/redo to store the previous positions of all of the selected displays",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 955,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 994,
            "description": "move the selected displays when user drags one of them",
            "params": [
                {
                    "name": ":",
                    "description": "res: mouse input"
                },
                {
                    "name": ":",
                    "description": "currentDisplay: the one user is dragging."
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1003,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1053,
            "description": "deselect all displays when the user clicks white space in track or right clicks on the menu",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1074,
            "description": "Public API for adding tracks (called from ComponentControls)",
            "params": [
                {
                    "name": "media",
                    "description": "URL of added resource (for audio, video, artwork)"
                },
                {
                    "name": "track",
                    "description": "Associated track (for ink)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1142,
            "description": "Utility to get track object from title\nUsed to load ink",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1158,
            "description": "searches through all displays and compares end times of each",
            "return": {
                "description": "allDisplaysEnd, the highest end time of all displays"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1188,
            "description": "Searches list of tracks for track w/ duplicate name\nIf duplicate exists, changes name to prevent duplication",
            "params": [
                {
                    "name": "title",
                    "description": "the new title"
                },
                {
                    "name": "id",
                    "description": "id of the track whose title is being changed"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1565,
            "description": "List of related artworks to be registered in database",
            "return": {
                "description": "GUIDs of all artworks loaded into tracks"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1597,
            "description": "Checks if there are any artworks or images in the timeline\nUsed in ComponentControls to check if ink can be added",
            "return": {
                "description": "true if there are artworks loaded"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1645,
            "description": "Call when tour has been fully initialized\nRIN reloads fired by edits are blocked until this is called!",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1655,
            "description": "Updates selected keyframe (or new keyframe) w/ keyframe data from RIN",
            "params": [
                {
                    "name": "trackName",
                    "description": "name of the track whose media is being manipulated"
                },
                {
                    "name": "capture",
                    "description": "keyframe data in RIN format (needs to be parsed)"
                },
                {
                    "name": "select",
                    "description": "whether receiving keyframe should be selected"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1681,
            "description": "Deselects selected keyframes on all tracks",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1695,
            "description": "Grabs current keyframe state from viewer",
            "return": {
                "description": "Keyframe data in xml"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1717,
            "return": {
                "description": "JSON object representing current state of timeline in RIN format"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1787,
            "description": "Helper function to collect track resource entries",
            "return": {
                "description": "JSON object table of resources"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1804,
            "description": "Helper function to collect track experience streams",
            "return": {
                "description": "JSON object table of ESs"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1820,
            "description": "Helper function for constructing screenplay xml string from tracks",
            "return": {
                "description": "XML screenplay string"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1842,
            "description": "Function passed into tracks to be called on track changes to update RIN data",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 1879,
            "description": "Loads tour file and initializes timeline UI accordingly",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 2115,
            "description": "function deleteAttachedInkDisplays(data) {\n    var i;\n    for (i = 0; i < data.attachedInks.length; i++) {\n        data.attachedInks[i].clearDisplays();\n    }\n}",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js",
            "line": 2127,
            "description": "Parses an individual track\nNote that this is scoped into loadRIN function! (needs access to inks variable)",
            "params": [
                {
                    "name": "eobj",
                    "description": "two params, name is track name, exp is rin format experience object"
                },
                {
                    "name": "e",
                    "description": "track position of eobj"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TopMenu.js",
            "line": 3,
            "description": "Main menu for Tour Authoring\nBack button, rename tour controls, save button, tour options",
            "params": [
                {
                    "name": "spec",
                    "description": "not used"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js",
            "line": 3,
            "description": "Control for additional tour options",
            "params": [
                {
                    "name": "spec:",
                    "description": "timeManager attr, url (url of tour if loading existing tour for editing)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js",
            "line": 42,
            "description": "Drop Down icon\nModified By: Hak",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js",
            "line": 84,
            "description": "Creates component menu buttons",
            "params": [
                {
                    "name": "title",
                    "description": "Name of button"
                },
                {
                    "name": "component",
                    "description": "DOM element to add button to"
                },
                {
                    "name": "id",
                    "description": "id to the element"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 14,
            "description": "Represents all the displays and keyframes of a piece of media over the duration of a tour\nMaps to Experience Stream in RIN",
            "params": [
                {
                    "name": "spec.type",
                    "description": "one of LADS.TourAuthoring.TrackType"
                },
                {
                    "name": "spec.media",
                    "description": "URI of resource"
                },
                {
                    "name": "spec.title",
                    "description": "Name to display"
                },
                {
                    "name": "spec.id",
                    "description": "Unique id (number)"
                },
                {
                    "name": "spec.guid",
                    "description": "Worktop GUID, artworks only"
                },
                {
                    "name": "spec.timeManager",
                    "description": "Reference to time object storing current length and scale of timeline"
                },
                {
                    "name": "my",
                    "description": "Object that will hold keyframes and displays (for accessing by subclasses w/o making public)\n                         Will be returned w/ 'displays', 'resource', 'type', 'timeManager', 'undoManager', 'track', 'svg' parameters\n                         Also used to track currentDisplay, currentKeyframe on mousedown, selectedKeyframe for keyframe capture (set in displays and keyframes)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1076,
            "description": "set a display selected when in multi select mode",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1087,
            "description": "set a display deselected in multi select mode",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1176,
            "description": "Functions for track ID\nCorresponds to ordering of tracks in timeline array\nMaps to z-layering in RIN\nEach track ID should be unique, but might change on track switch\nUse updatePos to update id",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1714,
            "description": "set current display deselected when user clicks it again",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1730,
            "description": "set the current display deselected",
            "params": [
                {
                    "name": ":",
                    "description": "currentDisplay: the display is been clicking on"
                }
            ],
            "keepdisplays": ":if we want to keep the displays",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1765,
            "description": "Handles drag on track\nPan timeline view\nIf a display or keyframe is selected, move that",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 1879,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2054,
            "description": "Gets the art display enclosing an attached ink track display.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2081,
            "description": "helper function that loops through the array of displays \nreturns the start of a display if there's a display nearby\nreturns 1 fadein, 0 fadeout and -1 otherwise",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2102,
            "description": "helper function for finding a certain track using it's id\nparam trackNum - the track's id\nreturns the track",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2118,
            "description": "moves the track and the left and right",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2128,
            "description": "moves the track up and down",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2295,
            "description": "Because loadRIN calls display.addKeyframe directly,\nwe need to pass it back into the track's list of allKeyframes manually for lines to draw",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2380,
            "params": [
                {
                    "name": "domElems",
                    "description": "Object w/ two properties: 'title', the title container, and 'track', the track container"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2474,
            "description": "Public fn for adding visibility to track",
            "params": [
                {
                    "name": "x",
                    "description": "x value (px) for display"
                },
                {
                    "name": "length",
                    "description": "length of display in seconds (set to 5 if not given) (only used in testing)"
                }
            ],
            "return": {
                "description": "command for adding/undoing addition"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2518,
            "description": "Helper function for inserting display into array\nKeeps displays sorted by start",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2527,
            "description": "For testing purposes only!!!",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2540,
            "description": "Updates track w/ new keyframe data at current location",
            "params": [
                {
                    "name": "capture",
                    "description": "keyframe data in RIN format"
                },
                {
                    "name": "select",
                    "description": "whether the keyframe receiving data should be selected"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2743,
            "description": "Add track resource to RIN resource table",
            "params": [
                {
                    "name": "table",
                    "description": "RIN resource table object to add entry to"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2754,
            "description": "Generates RIN data for Experience Stream from track",
            "params": [
                {
                    "name": "data",
                    "description": "\"ExperienceStreams\" object to add named track ES object to"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2867,
            "description": "--- DEPRECATED --- \nHelper function for generating Experience Streams\nGathers Keyframe Sequence data from displays",
            "return": {
                "description": "\"keyframeSequences\" object"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js",
            "line": 2881,
            "description": "Gathers screenplay entries from displays\nDon't forget to sort these things afterwards",
            "params": [
                {
                    "name": "screenplay",
                    "description": "Array to add screenplay entries to"
                },
                {
                    "name": "needFull",
                    "description": "If true, output screenplay entries regardless of internal settings"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 3,
            "description": "Keeps track of commands and changes issued by program and order of issuing\nCan unexecute or execute (undo / redo) these commands",
            "params": [
                {
                    "name": "spec",
                    "description": "not used"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 22,
            "description": "Log a command that has just been executed, ie. add it to the undo stack",
            "params": [
                {
                    "name": "command",
                    "description": "LADS.TourAuthoring.Command that was just run"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 47,
            "description": "function returns the savedState of the element in the top of the stack, which determines if timeline is dirty or not",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 92,
            "description": "Undo",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 108,
            "description": "Redo",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 124,
            "description": "Clears undo / redo stack\nCalled on save or after loading",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js",
            "line": 147,
            "description": "Utility for combining together multiple commands\n(Originally used for tying auto-creation of displays together with track creation)",
            "params": [
                {
                    "name": "n",
                    "description": "Number of commands to tie together"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.VideoTrack.js",
            "line": 3,
            "description": "Creates a Video track",
            "params": [
                {
                    "name": "spec",
                    "description": "Specifications (see Track class for details);"
                },
                {
                    "name": "my",
                    "description": "After superclass is called, will contain displays and keyframes arrays\n             Don't pass in unless you are subclassing this"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 3,
            "description": "Previews current tour while user edits",
            "params": [
                {
                    "name": "spec",
                    "description": "timeManager attr, url (url of tour if loading existing tour for editing)"
                },
                {
                    "name": "my",
                    "description": "not used"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 83,
            "description": "When RIN is interacted with, captures new keyframe data and sends it to timeline",
            "params": [
                {
                    "name": "eventArgs",
                    "description": "sender, eventId, ? (RIN)"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 126,
            "description": "Turn capturing off on update",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 135,
            "description": "Get state of keyframe disable switch.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 160,
            "description": "Syncs time manager with buffering state of RIN",
            "params": [
                {
                    "name": "isReady",
                    "description": "true if RIN is ready to play"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 192,
            "return": {
                "description": "current keyframe state data"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 202,
            "description": "Passed to TimeManager on player load",
            "return": {
                "description": "current time in player"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 217,
            "description": "Get JQuery object containing rin player",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 225,
            "description": "Updates size of viewer area on resize",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 255,
            "description": "Play viewer (should only be called from timeManager)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 267,
            "description": "Stop viewer (should only be called from timeManager)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 279,
            "description": "Seek viewer (should only be called from timeManager)",
            "params": [
                {
                    "name": "time",
                    "description": "location to seek to in units of seconds"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 299,
            "description": "Set volume",
            "params": [
                {
                    "name": "v",
                    "description": "volume, between 0 and 1"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 308,
            "description": "Set reference to Timeline for keyframe passing",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 316,
            "description": "Load tour from url",
            "params": [
                {
                    "name": "url",
                    "description": "URL of json tour"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 331,
            "description": "Load / reload tour into viewer",
            "params": [
                {
                    "name": "data",
                    "description": "Segment portion of RIN tour"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js",
            "line": 415,
            "description": "Unloads RIN player\ncall when exiting Authoring",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 38,
            "description": "Starts splitscreen",
            "params": [
                {
                    "name": "rootL",
                    "description": "DOM root element (as JQuery obj) to go in left screen"
                },
                {
                    "name": "rootR",
                    "description": "DOM root element (as JQuery obj) to go in right screen"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 114,
            "description": "Helper function for splitbar sliding and resizing\nNote: inner function in init()",
            "params": [
                {
                    "name": "ev",
                    "description": "Mouse event"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 203,
            "description": "Helper function for making exit buttons\nInner function of init()",
            "params": [
                {
                    "name": "side",
                    "description": "The side the button is going to go on"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 224,
            "description": "Exits splitscreen, making the specified side fullscreen and removing the other",
            "params": [
                {
                    "name": "newside",
                    "description": "The side to be made fullscreen, either 'R' or 'L'"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 270,
            "description": "All the layout specific edits that need to be made upon exit\nTheoretically, all of this should get wrapped into layout classes\nbut not sure the class pattern used allows for it",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.Splitscreen.js",
            "line": 392,
            "description": "More layout specific fixes\nExhibition fit-texting, called on exit and splitbar move",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 1311,
            "description": "Used by web app code to slide in pages given their html files",
            "params": [
                {
                    "name": "path",
                    "description": "the path to the html file within the html directory"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 1334,
            "params": [
                {
                    "name": "collectionId",
                    "description": "the id of the collection whose local visibility we want to check or set"
                },
                {
                    "name": "setValue",
                    "description": "falsy if just want to return visibility status\n                           if we want to set collection to be locally visible\n                         {visible: false} if we want to hide the collection locally",
                    "type": "Visible: true"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 1362,
            "description": "Utils for Animation, splitscreen, colors and the like",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 1823,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 2161,
            "description": "Following functions transition between pages while in splitscreen mode",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 2164,
            "description": "Use _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 2270,
            "description": "Use for any page transition that does not need to preserve splitscreen",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 2585,
            "description": "Creates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "params": [
                {
                    "name": "root",
                    "description": "object: jquery object for the root of the DOM (we'll append an overlay to this)"
                },
                {
                    "name": "title",
                    "description": "string: the title to appear at the top of the picker"
                },
                {
                    "name": "target",
                    "description": "object: a comp property (object whose associations we're managing) and a type property\n                              ('exhib', 'artwork', 'media') telling us what kind of component it is"
                },
                {
                    "name": "type",
                    "description": "string: \"exhib\" (exhib-artwork), \"artwork\" (artwork-media) : type of the association"
                },
                {
                    "name": "tabs",
                    "description": "array: list of tab objects. Each has a name property (string, title of tab), a getObjs\n                             property (a function to be called to get each entity listed in the tab), and a\n                             args property (which will be extra arguments sent to getObjs)"
                },
                {
                    "name": "filter",
                    "description": "object: a getObjs property to get components that are already associated with target\n                              (e.g. getAssocMediaTo if type='artwork') and an args property (extra args to getObjs)"
                },
                {
                    "name": "callback",
                    "description": "function: function to be called when import is clicked or a component is double clicked"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 2911,
            "description": "Creates the media panel",
            "params": [
                {
                    "name": "compArray",
                    "description": "the list of media to appear in the panel"
                },
                {
                    "name": "applyClick",
                    "description": "function to add handlers to each holder element"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 3309,
            "description": "Built-in object extensions",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 3332,
            "description": "If specified object is in the array, remove it",
            "params": [
                {
                    "name": "obj",
                    "description": "object to be removed"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 3346,
            "description": "Insert object into array based on comparator fn given\nAssumes array is already sorted!",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted"
                },
                {
                    "name": "comp",
                    "description": "Function used to compare objects; obj will be inserted when comp evaluates to true; takes two args, first is current array elt, second is obj"
                }
            ],
            "return": {
                "description": "Index of obj in array after insertion"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/util/LADS.Util.js",
            "line": 3365,
            "description": "Constrain a number to given range",
            "params": [
                {
                    "name": "num",
                    "description": "value to constrain"
                },
                {
                    "name": "min",
                    "description": "minimum limit"
                },
                {
                    "name": "max",
                    "description": "maximum limit"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/LADS/worktop/LADS.Worktop.Database.js",
            "line": 1191,
            "description": "Soft delete a hotspot by deleting both the hotspot linq and doq files",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.csv.js",
            "line": 31,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geo.js",
            "line": 357,
            "description": "Returns a function that, given a GeoJSON object (e.g., a feature), returns\nthe corresponding SVG path. The function can be customized by overriding the\nprojection. Point features are mapped to circles with a default radius of\n4.5px; the radius can be specified either as a constant or a function that\nis evaluated per object.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geo.js",
            "line": 628,
            "description": "Given a GeoJSON object, returns the corresponding bounding box. The bounding\nbox is represented by a two-dimensional array: [[left, bottom], [right,\ntop]], where left is the minimum longitude, bottom is the minimum latitude,\nright is maximum longitude, and top is the maximum latitude.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geom.js",
            "line": 2,
            "description": "Computes a contour for a given input grid function using the <a\nhref=\"http://en.wikipedia.org/wiki/Marching_squares\">marching\nsquares</a> algorithm. Returns the contour polygon as an array of points.",
            "params": [
                {
                    "name": "grid",
                    "description": "a two-input function(x, y) that returns true for values\ninside the contour and false for values outside the contour."
                },
                {
                    "name": "start",
                    "description": "an optional starting point [x, y] on the grid."
                }
            ],
            "return": {
                "description": "polygon [[x1, y1], [x2, y2], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geom.js",
            "line": 80,
            "description": "Computes the 2D convex hull of a set of points using Graham's scanning\nalgorithm. The algorithm has been implemented as described in Cormen,\nLeiserson, and Rivest's Introduction to Algorithms. The running time of\nthis algorithm is O(n log n), where n is the number of input points.",
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "polygon [[x1, y1], [x2, y2], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geom.js",
            "line": 282,
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "polygons [[[x1, y1], [x2, y2], …], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.geom.js",
            "line": 675,
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "triangles [[[x1, y1], [x2, y2], [x3, y3]], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.js",
            "line": 394,
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "",
                    "type": "Number="
                },
                {
                    "name": "step",
                    "description": "",
                    "type": "Number="
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.layout.js",
            "line": 646,
            "description": "Specifies the value function *x*, which returns a nonnegative numeric value\nfor each datum. The default value function is `Number`. The value function\nis passed two arguments: the current datum and the current index.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.layout.js",
            "line": 657,
            "description": "Specifies a sort comparison operator *x*. The comparator is passed two data\nelements from the data array, a and b; it returns a negative value if a is\nless than b, a positive value if a is greater than b, and zero if a equals\nb.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.layout.js",
            "line": 669,
            "description": "Specifies the overall start angle of the pie chart. Defaults to 0. The\nstart angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.layout.js",
            "line": 681,
            "description": "Specifies the overall end angle of the pie chart. Defaults to 2π. The\nend angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 5586,
            "description": "Specifies the value function *x*, which returns a nonnegative numeric value\nfor each datum. The default value function is `Number`. The value function\nis passed two arguments: the current datum and the current index.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 5597,
            "description": "Specifies a sort comparison operator *x*. The comparator is passed two data\nelements from the data array, a and b; it returns a negative value if a is\nless than b, a positive value if a is greater than b, and zero if a equals\nb.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 5609,
            "description": "Specifies the overall start angle of the pie chart. Defaults to 0. The\nstart angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 5621,
            "description": "Specifies the overall end angle of the pie chart. Defaults to 2π. The\nend angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 6861,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 7278,
            "description": "Returns a function that, given a GeoJSON object (e.g., a feature), returns\nthe corresponding SVG path. The function can be customized by overriding the\nprojection. Point features are mapped to circles with a default radius of\n4.5px; the radius can be specified either as a constant or a function that\nis evaluated per object.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 7538,
            "description": "Given a GeoJSON object, returns the corresponding bounding box. The bounding\nbox is represented by a two-dimensional array: [[left, bottom], [right,\ntop]], where left is the minimum longitude, bottom is the minimum latitude,\nright is maximum longitude, and top is the maximum latitude.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 7873,
            "description": "Computes a contour for a given input grid function using the <a\nhref=\"http://en.wikipedia.org/wiki/Marching_squares\">marching\nsquares</a> algorithm. Returns the contour polygon as an array of points.",
            "params": [
                {
                    "name": "grid",
                    "description": "a two-input function(x, y) that returns true for values\ninside the contour and false for values outside the contour."
                },
                {
                    "name": "start",
                    "description": "an optional starting point [x, y] on the grid."
                }
            ],
            "return": {
                "description": "polygon [[x1, y1], [x2, y2], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 7951,
            "description": "Computes the 2D convex hull of a set of points using Graham's scanning\nalgorithm. The algorithm has been implemented as described in Cormen,\nLeiserson, and Rivest's Introduction to Algorithms. The running time of\nthis algorithm is O(n log n), where n is the number of input points.",
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "polygon [[x1, y1], [x2, y2], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 8153,
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "polygons [[[x1, y1], [x2, y2], …], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/d3/d3.v2.js",
            "line": 8546,
            "params": [
                {
                    "name": "vertices",
                    "description": "[[x1, y1], [x2, y2], …]"
                }
            ],
            "return": {
                "description": "triangles [[[x1, y1], [x2, y2], [x3, y3]], …]"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/html2canvas/html2canvas.js",
            "line": 1,
            "license": "html2canvas v0.34 <http://html2canvas.hertzen.com>\nCopyright (c) 2011 Niklas von Hertzen. All rights reserved.\nhttp://www.twitter.com/niklasvh\n\nReleased under MIT License",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/html2canvas/jquery.plugin.html2canvas.js",
            "line": 1,
            "license": "html2canvas v0.34 <http://html2canvas.hertzen.com>\nCopyright (c) 2011 Niklas von Hertzen. All rights reserved.\nhttp://www.twitter.com/niklasvh\n\nReleased under MIT License",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 883,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 903,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 912,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 933,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 947,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 976,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 987,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 998,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 1020,
            "description": "Checks a node for validity as a Sizzle context",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Element|Object="
                }
            ],
            "return": {
                "description": "The input node if acceptable, otherwise a falsy value",
                "type": "Element|Object|Boolean"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 1032,
            "description": "Detects XML nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "return": {
                "description": "True iff elem is a non-HTML XML node",
                "type": "Boolean"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 1044,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 1474,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 1507,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 3432,
            "description": "Clean-up method for dom ready events",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 3446,
            "description": "The ready event handler and self cleanup method",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 3597,
            "description": "Determines whether an object can have data",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 5976,
            "description": "Retrieve the actual display of a element",
            "params": [
                {
                    "name": "name",
                    "description": "nodeName of the element",
                    "type": "String"
                },
                {
                    "name": "doc",
                    "description": "Document object",
                    "type": "Object"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 5999,
            "description": "Try to determine the default display value of an element",
            "params": [
                {
                    "name": "nodeName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 9971,
            "description": "Load a url into a page",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.11.0.js",
            "line": 10046,
            "description": "Gets a window from an element",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/jQueryUI/js/jquery-1.7.1.js",
            "line": 4183,
            "description": "Utility function for retreiving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 294,
            "description": "Creates an \"adjustment\" function for a given overlay placement that\nadjusts an overlay's position depending on its size and placement. This\ngives better perf during draw loop since we don't need to re-check and\nre-calculate the adjustment every single iteration.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 690,
            "description": "Returns true if the given tile provides coverage to lower-level tiles of\nlower resolution representing the same content. If neither x nor y is\ngiven, returns true if the entire visible level provides coverage.\n\nNote that out-of-bounds tiles provide coverage in this sense, since\nthere's no content that they would need to cover. Tiles at non-existent\nlevels that are within the image bounds, however, do not.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 728,
            "description": "Returns true if the given tile is completely covered by higher-level\ntiles of higher resolution representing the same content. If neither x\nnor y is given, returns true if the entire visible level is covered.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 744,
            "description": "Sets whether the given tile provides coverage or not.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 761,
            "description": "Resets coverage information for the given level. This should be called\nafter every draw routine. Note that at the beginning of the next draw\nroutine, coverage for every visible tile should be explicitly set.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Drawer.js",
            "line": 820,
            "description": "What do I need to return?\n_lastUpdated is instance var\nneed list to load - can just load here...?",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.MouseTracker.js",
            "line": 40,
            "description": "Returns true if elmtB is a child node of elmtA, or if they're equal.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.MouseTracker.js",
            "line": 341,
            "description": "Only triggered once by the deepest element that initially received\nthe mouse down event. We want to make sure THIS event doesn't bubble.\nInstead, we want to trigger the elements that initially received the\nmouse down event (including this one) only if the mouse is no longer\ninside them. Then, we want to release capture, and emulate a regular\nmouseup on the event that this event was meant for.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.MouseTracker.js",
            "line": 375,
            "description": "Only triggered in W3C browsers by elements within which the mouse was\ninitially pressed, since they are now listening to the window for\nmouseup during the capture phase. We shouldn't handle the mouseup\nhere if the mouse is still inside this element, since the regular\nmouseup handler will still fire.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.MouseTracker.js",
            "line": 448,
            "description": "Only triggered once by the deepest element that initially received\nthe mouse down event. Since no other element has captured the mouse,\nwe want to trigger the elements that initially received the mouse\ndown event (including this one).",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Spring.js",
            "line": 18,
            "description": "Transform from linear [0,1] to spring [0,1].",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Viewer.js",
            "line": 27,
            "description": "Adds the given element to the given container based on the given anchor,\nsuch that all new elements anchored to a right edge are shown to the left\nof existing elements anchored to the same edge.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/src/Seadragon.Viewer.js",
            "line": 490,
            "description": "Schedules a complete redraw of the image",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/seadragon/seadragon-min.js",
            "line": 1,
            "description": "Seadragon Ajax 0.8.9 (build 64702 on 2011-01-28)\nhttp://gallery.expression.microsoft.com/SeadragonAjax\nThis code is distributed under the license agreement at:\nhttp://go.microsoft.com/fwlink/?LinkId=164943",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "line": 1,
            "description": "Author: Ricky Brundritt\nWebsite: http://rbrundritt.wordpress.com\nDate: May 21nd, 2011\n\nDescription: \nThis JavaScript file is meant to create a infobox control that is highly \ncustomizable, reusable, and easy to extend. This method takes in a map \nreference, and a set of options. \n\nExample Usage:\n\nvar map, customInfobox;\n\nfunction GetMap()\n{\n\tvar map = new Microsoft.Maps.Map(document.getElementById(\"myMap\"),{ credentials: \"YOUR_BING_MAPS_KEY\" });\n\t\n\tMicrosoft.Maps.registerModule(\"CustomInfoboxModule\", \"scripts/V7CustomInfobox.min.js\");\n\t    Microsoft.Maps.loadModule(\"CustomInfoboxModule\", { callback: function () {\n\t        customInfobox = new CustomInfobox(map);\n\t    }\n\t});\n}\n\n//Have data be returned from data source and added to the cluster layer\nfunction ClusterLayer(results)\n{\n\tclusteredLayer.SetData(results);\n}\n\nfunction displayInfobox() {\n\tcustomInfobox.show(map.getCenter(), \"Hello World\");\n}",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "line": 63,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "line": 312,
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "line": 334,
            "return": {
                "description": "The custom infobox options."
            },
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js",
            "line": 341,
            "description": "Sets the custom infobox options.\nExample: customInfobox.SetOptions({ gridSize : 30});",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/aes.js",
            "line": 80,
            "description": "AES block cipher algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/aes.js",
            "line": 204,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 7,
            "description": "Cipher core components.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 23,
            "description": "Abstract base cipher template.",
            "itemtype": "property",
            "name": "{number} _DEC_XFORM_MODE A constant representing decryption mode.",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 32,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "iv The IV to use for this operation.",
            "type": "WordArray",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 39,
            "description": "Creates this cipher in encryption mode.",
            "params": [
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "WordArray"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A cipher instance.",
                "type": "Cipher"
            },
            "static": 1,
            "example": [
                "\n\n    var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 57,
            "description": "Creates this cipher in decryption mode.",
            "params": [
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "WordArray"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A cipher instance.",
                "type": "Cipher"
            },
            "static": 1,
            "example": [
                "\n\n    var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 75,
            "description": "Initializes a newly created cipher.",
            "params": [
                {
                    "name": "xformMode",
                    "description": "Either the encryption or decryption transormation mode constant.",
                    "type": "Number"
                },
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "WordArray"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 98,
            "description": "Resets this cipher to its initial state.",
            "example": [
                "\n\n    cipher.reset();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 113,
            "description": "Adds data to be encrypted or decrypted.",
            "params": [
                {
                    "name": "dataUpdate",
                    "description": "The data to encrypt or decrypt.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The data after processing.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var encrypted = cipher.process('data');\n    var encrypted = cipher.process(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 133,
            "description": "Finalizes the encryption or decryption process.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "params": [
                {
                    "name": "dataUpdate",
                    "description": "The final data to encrypt or decrypt.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The data after final processing.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var encrypted = cipher.finalize();\n    var encrypted = cipher.finalize('data');\n    var encrypted = cipher.finalize(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 167,
            "description": "Creates shortcut functions to a cipher's object interface.",
            "params": [
                {
                    "name": "cipher",
                    "description": "The cipher to create a helper for.",
                    "type": "Cipher"
                }
            ],
            "return": {
                "description": "An object with encrypt and decrypt shortcut functions.",
                "type": "Object"
            },
            "static": 1,
            "example": [
                "\n\n    var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 203,
            "description": "Abstract base stream cipher template.",
            "itemtype": "property",
            "name": "blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 219,
            "description": "Mode namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 224,
            "description": "Abstract base block cipher mode template.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 228,
            "description": "Creates this mode for encryption.",
            "params": [
                {
                    "name": "cipher",
                    "description": "A block cipher instance.",
                    "type": "Cipher"
                },
                {
                    "name": "iv",
                    "description": "The IV words.",
                    "type": "Array"
                }
            ],
            "static": 1,
            "example": [
                "\n\n    var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 244,
            "description": "Creates this mode for decryption.",
            "params": [
                {
                    "name": "cipher",
                    "description": "A block cipher instance.",
                    "type": "Cipher"
                },
                {
                    "name": "iv",
                    "description": "The IV words.",
                    "type": "Array"
                }
            ],
            "static": 1,
            "example": [
                "\n\n    var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 260,
            "description": "Initializes a newly created mode.",
            "params": [
                {
                    "name": "cipher",
                    "description": "A block cipher instance.",
                    "type": "Cipher"
                },
                {
                    "name": "iv",
                    "description": "The IV words.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n    var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 276,
            "description": "Cipher Block Chaining mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 280,
            "description": "Abstract base CBC mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 285,
            "description": "CBC encryptor.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 289,
            "description": "Processes the data block at offset.",
            "params": [
                {
                    "name": "words",
                    "description": "The data words to operate on.",
                    "type": "Array"
                },
                {
                    "name": "offset",
                    "description": "The offset where the block starts.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n    mode.processBlock(data.words, offset);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 313,
            "description": "CBC decryptor.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 317,
            "description": "Processes the data block at offset.",
            "params": [
                {
                    "name": "words",
                    "description": "The data words to operate on.",
                    "type": "Array"
                },
                {
                    "name": "offset",
                    "description": "The offset where the block starts.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n    mode.processBlock(data.words, offset);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 367,
            "description": "Padding namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 372,
            "description": "PKCS #5/7 padding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 376,
            "description": "Pads data using the algorithm defined in PKCS #5/7.",
            "params": [
                {
                    "name": "data",
                    "description": "The data to pad.",
                    "type": "WordArray"
                },
                {
                    "name": "blockSize",
                    "description": "The multiple that the data should be padded to.",
                    "type": "Number"
                }
            ],
            "static": 1,
            "example": [
                "\n\n    CryptoJS.pad.Pkcs7.pad(wordArray, 4);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 409,
            "description": "Unpads data that had been padded using the algorithm defined in PKCS #5/7.",
            "params": [
                {
                    "name": "data",
                    "description": "The data to unpad.",
                    "type": "WordArray"
                }
            ],
            "static": 1,
            "example": [
                "\n\n    CryptoJS.pad.Pkcs7.unpad(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 429,
            "description": "Abstract base block cipher template.",
            "itemtype": "property",
            "name": "blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 435,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "{Padding} padding The padding strategy to use. Default: Pkcs7",
            "type": "Mode",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 496,
            "description": "A collection of cipher parameters.",
            "itemtype": "property",
            "name": "{Format} formatter The default formatting strategy to convert this cipher params object to a string.",
            "type": "WordArray",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 510,
            "description": "Initializes a newly created cipher params object.",
            "params": [
                {
                    "name": "cipherParams",
                    "description": "An object with any of the possible cipher parameters.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    var cipherParams = CryptoJS.lib.CipherParams.create({\n        ciphertext: ciphertextWordArray,\n        key: keyWordArray,\n        iv: ivWordArray,\n        salt: saltWordArray,\n        algorithm: CryptoJS.algo.AES,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.PKCS7,\n        blockSize: 4,\n        formatter: CryptoJS.format.OpenSSL\n    });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 533,
            "description": "Converts this cipher params object to a string.",
            "params": [
                {
                    "name": "formatter",
                    "description": "(Optional) The formatting strategy to use.",
                    "type": "Format"
                }
            ],
            "return": {
                "description": "The stringified cipher params.",
                "type": "String"
            },
            "throws": {
                "description": "Error If neither the formatter nor the default formatter is set."
            },
            "example": [
                "\n\n    var string = cipherParams + '';\n    var string = cipherParams.toString();\n    var string = cipherParams.toString(CryptoJS.format.OpenSSL);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 553,
            "description": "Format namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 558,
            "description": "OpenSSL formatting strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 562,
            "description": "Converts a cipher params object to an OpenSSL-compatible string.",
            "params": [
                {
                    "name": "cipherParams",
                    "description": "The cipher params object.",
                    "type": "CipherParams"
                }
            ],
            "return": {
                "description": "The OpenSSL-compatible string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 590,
            "description": "Converts an OpenSSL-compatible string to a cipher params object.",
            "params": [
                {
                    "name": "openSSLStr",
                    "description": "The OpenSSL-compatible string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cipher params object.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 624,
            "description": "A cipher wrapper that returns ciphertext as a serializable cipher params object.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 628,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL",
            "type": "Formatter",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 637,
            "description": "Encrypts a message.",
            "params": [
                {
                    "name": "cipher",
                    "description": "The cipher algorithm to use.",
                    "type": "Cipher"
                },
                {
                    "name": "message",
                    "description": "The message to encrypt.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "WordArray"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A cipher params object.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n    var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n    var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 679,
            "description": "Decrypts serialized ciphertext.",
            "params": [
                {
                    "name": "cipher",
                    "description": "The cipher algorithm to use.",
                    "type": "Cipher"
                },
                {
                    "name": "ciphertext",
                    "description": "The ciphertext to decrypt.",
                    "type": "CipherParams|string"
                },
                {
                    "name": "key",
                    "description": "The key.",
                    "type": "WordArray"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The plaintext.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n    var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 709,
            "description": "Converts serialized ciphertext to CipherParams,\nelse assumed CipherParams already and returns ciphertext unchanged.",
            "params": [
                {
                    "name": "ciphertext",
                    "description": "The ciphertext.",
                    "type": "CipherParams|string"
                },
                {
                    "name": "format",
                    "description": "The formatting strategy to use to parse serialized ciphertext.",
                    "type": "Formatter"
                }
            ],
            "return": {
                "description": "The unserialized ciphertext.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 733,
            "description": "Key derivation function namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 738,
            "description": "OpenSSL key derivation function.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 742,
            "description": "Derives a key and IV from a password.",
            "params": [
                {
                    "name": "password",
                    "description": "The password to derive from.",
                    "type": "String"
                },
                {
                    "name": "keySize",
                    "description": "The size in words of the key to generate.",
                    "type": "Number"
                },
                {
                    "name": "ivSize",
                    "description": "The size in words of the IV to generate.",
                    "type": "Number"
                },
                {
                    "name": "salt",
                    "description": "(Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "A cipher params object with the key, IV, and salt.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n    var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 777,
            "description": "A serializable cipher wrapper that derives the key from a password,\nand returns ciphertext as a serializable cipher params object.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 782,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL",
            "type": "KDF",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 791,
            "description": "Encrypts a message using a password.",
            "params": [
                {
                    "name": "cipher",
                    "description": "The cipher algorithm to use.",
                    "type": "Cipher"
                },
                {
                    "name": "message",
                    "description": "The message to encrypt.",
                    "type": "WordArray|string"
                },
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "String"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A cipher params object.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n    var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/cipher-core.js",
            "line": 827,
            "description": "Decrypts serialized ciphertext using a password.",
            "params": [
                {
                    "name": "cipher",
                    "description": "The cipher algorithm to use.",
                    "type": "Cipher"
                },
                {
                    "name": "ciphertext",
                    "description": "The ciphertext to decrypt.",
                    "type": "CipherParams|string"
                },
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "String"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this operation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The plaintext.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n    var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 7,
            "description": "CryptoJS core components.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 11,
            "description": "CryptoJS namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 16,
            "description": "Library namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 21,
            "description": "Base object for prototypal inheritance.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 28,
            "description": "Creates a new object that inherits from this object.",
            "params": [
                {
                    "name": "overrides",
                    "description": "Properties to copy into the new object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The new object.",
                "type": "Object"
            },
            "static": 1,
            "example": [
                "\n\n    var MyType = CryptoJS.lib.Base.extend({\n        field: 'value',\n\n        method: function () {\n        }\n    });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 72,
            "description": "Extends this object and runs the init method.\nArguments to create() will be passed to init().",
            "return": {
                "description": "The new object.",
                "type": "Object"
            },
            "static": 1,
            "example": [
                "\n\n    var instance = MyType.create();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 91,
            "description": "Initializes a newly created object.\nOverride this method to add some logic when your objects are created.",
            "example": [
                "\n\n    var MyType = CryptoJS.lib.Base.extend({\n        init: function () {\n            // ...\n        }\n    });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 106,
            "description": "Copies properties into this object.",
            "params": [
                {
                    "name": "properties",
                    "description": "The properties to mix in.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    MyType.mixIn({\n        field: 'value'\n    });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 130,
            "description": "Creates a copy of this object.",
            "return": {
                "description": "The clone.",
                "type": "Object"
            },
            "example": [
                "\n\n    var clone = instance.clone();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 145,
            "description": "An array of 32-bit words.",
            "itemtype": "property",
            "name": "{number} sigBytes The number of significant bytes in this word array.",
            "type": "Array",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 152,
            "description": "Initializes a newly created word array.",
            "params": [
                {
                    "name": "words",
                    "description": "(Optional) An array of 32-bit words.",
                    "type": "Array"
                },
                {
                    "name": "sigBytes",
                    "description": "(Optional) The number of significant bytes in the words.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n    var wordArray = CryptoJS.lib.WordArray.create();\n    var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n    var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 174,
            "description": "Converts this word array to a string.",
            "params": [
                {
                    "name": "encoder",
                    "description": "(Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex",
                    "type": "Encoder"
                }
            ],
            "return": {
                "description": "The stringified word array.",
                "type": "String"
            },
            "example": [
                "\n\n    var string = wordArray + '';\n    var string = wordArray.toString();\n    var string = wordArray.toString(CryptoJS.enc.Utf8);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 191,
            "description": "Concatenates a word array to this word array.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array to append.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "This word array.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    wordArray1.concat(wordArray2);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 234,
            "description": "Removes insignificant bits.",
            "example": [
                "\n\n    wordArray.clamp();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 251,
            "description": "Creates a copy of this word array.",
            "return": {
                "description": "The clone.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var clone = wordArray.clone();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 267,
            "description": "Creates a word array filled with random bytes.",
            "params": [
                {
                    "name": "nBytes",
                    "description": "The number of random bytes to generate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The random word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.lib.WordArray.random(16);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 290,
            "description": "Encoder namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 295,
            "description": "Hex encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 299,
            "description": "Converts a word array to a hex string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The hex string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var hexString = CryptoJS.enc.Hex.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 328,
            "description": "Converts a hex string to a word array.",
            "params": [
                {
                    "name": "hexStr",
                    "description": "The hex string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Hex.parse(hexString);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 355,
            "description": "Latin1 encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 359,
            "description": "Converts a word array to a Latin1 string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The Latin1 string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 387,
            "description": "Converts a Latin1 string to a word array.",
            "params": [
                {
                    "name": "latin1Str",
                    "description": "The Latin1 string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Latin1.parse(latin1String);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 414,
            "description": "UTF-8 encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 418,
            "description": "Converts a word array to a UTF-8 string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The UTF-8 string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 439,
            "description": "Converts a UTF-8 string to a word array.",
            "params": [
                {
                    "name": "utf8Str",
                    "description": "The UTF-8 string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Utf8.parse(utf8String);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 457,
            "description": "Abstract buffered block algorithm template.\n\nThe property blockSize must be implemented in a concrete subtype.",
            "itemtype": "property",
            "name": "_minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 465,
            "description": "Resets this block algorithm's data buffer to its initial state.",
            "example": [
                "\n\n    bufferedBlockAlgorithm.reset();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 478,
            "description": "Adds new data to this block algorithm's buffer.",
            "params": [
                {
                    "name": "data",
                    "description": "The data to append. Strings are converted to a WordArray using UTF-8.",
                    "type": "WordArray|string"
                }
            ],
            "example": [
                "\n\n    bufferedBlockAlgorithm._append('data');\n    bufferedBlockAlgorithm._append(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 499,
            "description": "Processes available data blocks.\n\nThis method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.",
            "params": [
                {
                    "name": "doFlush",
                    "description": "Whether all blocks and partial blocks should be processed.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The processed data.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var processedData = bufferedBlockAlgorithm._process();\n    var processedData = bufferedBlockAlgorithm._process(!!'flush');"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 554,
            "description": "Creates a copy of this object.",
            "return": {
                "description": "The clone.",
                "type": "Object"
            },
            "example": [
                "\n\n    var clone = bufferedBlockAlgorithm.clone();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 573,
            "description": "Abstract hasher template.",
            "itemtype": "property",
            "name": "blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 579,
            "description": "Configuration options.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 584,
            "description": "Initializes a newly created hasher.",
            "params": [
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this hash computation.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    var hasher = CryptoJS.algo.SHA256.create();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 601,
            "description": "Resets this hasher to its initial state.",
            "example": [
                "\n\n    hasher.reset();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 616,
            "description": "Updates this hasher with a message.",
            "params": [
                {
                    "name": "messageUpdate",
                    "description": "The message to append.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "This hasher.",
                "type": "Hasher"
            },
            "example": [
                "\n\n    hasher.update('message');\n    hasher.update(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 639,
            "description": "Finalizes the hash computation.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "params": [
                {
                    "name": "messageUpdate",
                    "description": "(Optional) A final message update.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var hash = hasher.finalize();\n    var hash = hasher.finalize('message');\n    var hash = hasher.finalize(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 667,
            "description": "Creates a shortcut function to a hasher's object interface.",
            "params": [
                {
                    "name": "hasher",
                    "description": "The hasher to create a helper for.",
                    "type": "Hasher"
                }
            ],
            "return": {
                "description": "The shortcut function.",
                "type": "Function"
            },
            "static": 1,
            "example": [
                "\n\n    var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 686,
            "description": "Creates a shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "hasher",
                    "description": "The hasher to use in this HMAC helper.",
                    "type": "Hasher"
                }
            ],
            "return": {
                "description": "The shortcut function.",
                "type": "Function"
            },
            "static": 1,
            "example": [
                "\n\n    var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/core.js",
            "line": 706,
            "description": "Algorithm namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-base64.js",
            "line": 14,
            "description": "Base64 encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-base64.js",
            "line": 18,
            "description": "Converts a word array to a Base64 string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The Base64 string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var base64String = CryptoJS.enc.Base64.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-base64.js",
            "line": 65,
            "description": "Converts a Base64 string to a word array.",
            "params": [
                {
                    "name": "base64Str",
                    "description": "The Base64 string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Base64.parse(base64String);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 14,
            "description": "UTF-16 BE encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 18,
            "description": "Converts a word array to a UTF-16 BE string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The UTF-16 BE string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 46,
            "description": "Converts a UTF-16 BE string to a word array.",
            "params": [
                {
                    "name": "utf16Str",
                    "description": "The UTF-16 BE string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Utf16.parse(utf16String);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 73,
            "description": "UTF-16 LE encoding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 77,
            "description": "Converts a word array to a UTF-16 LE string.",
            "params": [
                {
                    "name": "wordArray",
                    "description": "The word array.",
                    "type": "WordArray"
                }
            ],
            "return": {
                "description": "The UTF-16 LE string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/enc-utf16.js",
            "line": 105,
            "description": "Converts a UTF-16 LE string to a word array.",
            "params": [
                {
                    "name": "utf16Str",
                    "description": "The UTF-16 LE string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The word array.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "line": 16,
            "description": "This key derivation function is meant to conform with EVP_BytesToKey.\nwww.openssl.org/docs/crypto/EVP_BytesToKey.html",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "line": 21,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "{number} iterations The number of iterations to perform. Default: 1",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "line": 34,
            "description": "Initializes a newly created key derivation function.",
            "params": [
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for the derivation.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    var kdf = CryptoJS.algo.EvpKDF.create();\n    var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n    var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "line": 49,
            "description": "Derives a key from a password.",
            "params": [
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "WordArray|string"
                },
                {
                    "name": "salt",
                    "description": "A salt.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The derived key.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var key = kdf.compute(password, salt);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/evpkdf.js",
            "line": 98,
            "description": "Derives a key from a password.",
            "params": [
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "WordArray|string"
                },
                {
                    "name": "salt",
                    "description": "A salt.",
                    "type": "WordArray|string"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this computation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The derived key.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var key = CryptoJS.EvpKDF(password, salt);\n    var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n    var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/format-hex.js",
            "line": 17,
            "description": "Converts the ciphertext of a cipher params object to a hexadecimally encoded string.",
            "params": [
                {
                    "name": "cipherParams",
                    "description": "The cipher params object.",
                    "type": "CipherParams"
                }
            ],
            "return": {
                "description": "The hexadecimally encoded string.",
                "type": "String"
            },
            "static": 1,
            "example": [
                "\n\n    var hexString = CryptoJS.format.Hex.stringify(cipherParams);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/format-hex.js",
            "line": 34,
            "description": "Converts a hexadecimally encoded ciphertext string to a cipher params object.",
            "params": [
                {
                    "name": "input",
                    "description": "The hexadecimally encoded string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cipher params object.",
                "type": "CipherParams"
            },
            "static": 1,
            "example": [
                "\n\n    var cipherParams = CryptoJS.format.Hex.parse(hexString);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/hmac.js",
            "line": 16,
            "description": "HMAC algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/hmac.js",
            "line": 20,
            "description": "Initializes a newly created HMAC.",
            "params": [
                {
                    "name": "hasher",
                    "description": "The hash algorithm to use.",
                    "type": "Hasher"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "example": [
                "\n\n    var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/hmac.js",
            "line": 70,
            "description": "Resets this HMAC to its initial state.",
            "example": [
                "\n\n    hmacHasher.reset();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/hmac.js",
            "line": 86,
            "description": "Updates this HMAC with a message.",
            "params": [
                {
                    "name": "messageUpdate",
                    "description": "The message to append.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "This HMAC instance.",
                "type": "HMAC"
            },
            "example": [
                "\n\n    hmacHasher.update('message');\n    hmacHasher.update(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/hmac.js",
            "line": 105,
            "description": "Finalizes the HMAC computation.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "params": [
                {
                    "name": "messageUpdate",
                    "description": "(Optional) A final message update.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var hmac = hmacHasher.finalize();\n    var hmac = hmacHasher.finalize('message');\n    var hmac = hmacHasher.finalize(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/md5.js",
            "line": 25,
            "description": "MD5 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/md5.js",
            "line": 223,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.MD5('message');\n    var hash = CryptoJS.MD5(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/md5.js",
            "line": 239,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacMD5(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/mode-cfb.js",
            "line": 7,
            "description": "Cipher Feedback block mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/mode-ctr-gladman.js",
            "line": 7,
            "description": "Counter block mode compatible with  Dr Brian Gladman fileenc.c\nderived from CryptoJS.mode.CTR \nJan Hruby jhruby.web@gmail.com",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/mode-ctr.js",
            "line": 7,
            "description": "Counter block mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/mode-ecb.js",
            "line": 7,
            "description": "Electronic Codebook block mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/mode-ofb.js",
            "line": 7,
            "description": "Output Feedback block mode.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pad-ansix923.js",
            "line": 7,
            "description": "ANSI X.923 padding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pad-iso10126.js",
            "line": 7,
            "description": "ISO 10126 padding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pad-iso97971.js",
            "line": 7,
            "description": "ISO/IEC 9797-1 Padding Method 2.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pad-nopadding.js",
            "line": 7,
            "description": "A noop padding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pad-zeropadding.js",
            "line": 7,
            "description": "Zero padding strategy.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "line": 17,
            "description": "Password-Based Key Derivation Function 2 algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "line": 21,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "{number} iterations The number of iterations to perform. Default: 1",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "line": 34,
            "description": "Initializes a newly created key derivation function.",
            "params": [
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for the derivation.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n    var kdf = CryptoJS.algo.PBKDF2.create();\n    var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n    var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "line": 49,
            "description": "Computes the Password-Based Key Derivation Function 2.",
            "params": [
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "WordArray|string"
                },
                {
                    "name": "salt",
                    "description": "A salt.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The derived key.",
                "type": "WordArray"
            },
            "example": [
                "\n\n    var key = kdf.compute(password, salt);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/pbkdf2.js",
            "line": 111,
            "description": "Computes the Password-Based Key Derivation Function 2.",
            "params": [
                {
                    "name": "password",
                    "description": "The password.",
                    "type": "WordArray|string"
                },
                {
                    "name": "salt",
                    "description": "A salt.",
                    "type": "WordArray|string"
                },
                {
                    "name": "cfg",
                    "description": "(Optional) The configuration options to use for this computation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The derived key.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var key = CryptoJS.PBKDF2(password, salt);\n    var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n    var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rabbit-legacy.js",
            "line": 19,
            "description": "Rabbit stream cipher algorithm.\n\nThis is a legacy version that neglected to convert the key to little-endian.\nThis error doesn't affect the cipher's security,\nbut it does affect its compatibility with other implementations.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rabbit-legacy.js",
            "line": 167,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rabbit.js",
            "line": 19,
            "description": "Rabbit stream cipher algorithm",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rabbit.js",
            "line": 169,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rc4.js",
            "line": 14,
            "description": "RC4 stream cipher algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rc4.js",
            "line": 83,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rc4.js",
            "line": 93,
            "description": "Modified RC4 stream cipher algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rc4.js",
            "line": 97,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "drop The number of keystream words to drop. Default 192",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/rc4.js",
            "line": 116,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/ripemd160.js",
            "line": 7,
            "description": "(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/ripemd160.js",
            "line": 55,
            "description": "RIPEMD160 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/ripemd160.js",
            "line": 222,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.RIPEMD160('message');\n    var hash = CryptoJS.RIPEMD160(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/ripemd160.js",
            "line": 238,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacRIPEMD160(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha1.js",
            "line": 18,
            "description": "SHA-1 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha1.js",
            "line": 105,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA1('message');\n    var hash = CryptoJS.SHA1(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha1.js",
            "line": 121,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA1(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha224.js",
            "line": 15,
            "description": "SHA-224 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha224.js",
            "line": 35,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA224('message');\n    var hash = CryptoJS.SHA224(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha224.js",
            "line": 51,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA224(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha256.js",
            "line": 55,
            "description": "SHA-256 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha256.js",
            "line": 154,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA256('message');\n    var hash = CryptoJS.SHA256(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha256.js",
            "line": 170,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA256(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha3.js",
            "line": 79,
            "description": "SHA-3 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha3.js",
            "line": 83,
            "description": "Configuration options.",
            "itemtype": "property",
            "name": "outputLength!~YUIDOC_LINE~!  The desired number of bits in the output hash.!~YUIDOC_LINE~!  Only values permitted are: 224, 256, 384, 512.!~YUIDOC_LINE~!  Default: 512",
            "type": "Number",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha3.js",
            "line": 278,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA3('message');\n    var hash = CryptoJS.SHA3(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha3.js",
            "line": 294,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA3(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha384.js",
            "line": 16,
            "description": "SHA-384 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha384.js",
            "line": 38,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA384('message');\n    var hash = CryptoJS.SHA384(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha384.js",
            "line": 54,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA384(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha512.js",
            "line": 73,
            "description": "SHA-512 hash algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha512.js",
            "line": 278,
            "description": "Shortcut function to the hasher's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The hash.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hash = CryptoJS.SHA512('message');\n    var hash = CryptoJS.SHA512(wordArray);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/sha512.js",
            "line": 294,
            "description": "Shortcut function to the HMAC's object interface.",
            "params": [
                {
                    "name": "message",
                    "description": "The message to hash.",
                    "type": "WordArray|string"
                },
                {
                    "name": "key",
                    "description": "The secret key.",
                    "type": "WordArray|string"
                }
            ],
            "return": {
                "description": "The HMAC.",
                "type": "WordArray"
            },
            "static": 1,
            "example": [
                "\n\n    var hmac = CryptoJS.HmacSHA512(message, key);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/tripledes.js",
            "line": 579,
            "description": "DES block cipher algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/tripledes.js",
            "line": 703,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/tripledes.js",
            "line": 713,
            "description": "Triple-DES block cipher algorithm.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/tripledes.js",
            "line": 747,
            "description": "Shortcut functions to the cipher's object interface.",
            "example": [
                "\n\n    var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n    var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 14,
            "description": "x64 namespace.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 19,
            "description": "A 64-bit word.",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 23,
            "description": "Initializes a newly created 64-bit word.",
            "params": [
                {
                    "name": "high",
                    "description": "The high 32 bits.",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "The low 32 bits.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n    var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 38,
            "description": "Bitwise NOTs this word.",
            "return": {
                "description": "A new x64-Word object after negating.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var negated = x64Word.not();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 54,
            "description": "Bitwise ANDs this word with the passed word.",
            "params": [
                {
                    "name": "word",
                    "description": "The x64-Word to AND with this word.",
                    "type": "X64Word"
                }
            ],
            "return": {
                "description": "A new x64-Word object after ANDing.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var anded = x64Word.and(anotherX64Word);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 72,
            "description": "Bitwise ORs this word with the passed word.",
            "params": [
                {
                    "name": "word",
                    "description": "The x64-Word to OR with this word.",
                    "type": "X64Word"
                }
            ],
            "return": {
                "description": "A new x64-Word object after ORing.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var ored = x64Word.or(anotherX64Word);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 90,
            "description": "Bitwise XORs this word with the passed word.",
            "params": [
                {
                    "name": "word",
                    "description": "The x64-Word to XOR with this word.",
                    "type": "X64Word"
                }
            ],
            "return": {
                "description": "A new x64-Word object after XORing.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var xored = x64Word.xor(anotherX64Word);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 108,
            "description": "Shifts this word n bits to the left.",
            "params": [
                {
                    "name": "n",
                    "description": "The number of bits to shift.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new x64-Word object after shifting.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var shifted = x64Word.shiftL(25);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 131,
            "description": "Shifts this word n bits to the right.",
            "params": [
                {
                    "name": "n",
                    "description": "The number of bits to shift.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new x64-Word object after shifting.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var shifted = x64Word.shiftR(7);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 154,
            "description": "Rotates this word n bits to the left.",
            "params": [
                {
                    "name": "n",
                    "description": "The number of bits to rotate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new x64-Word object after rotating.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var rotated = x64Word.rotL(25);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 169,
            "description": "Rotates this word n bits to the right.",
            "params": [
                {
                    "name": "n",
                    "description": "The number of bits to rotate.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A new x64-Word object after rotating.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var rotated = x64Word.rotR(7);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 184,
            "description": "Adds this word with the passed word.",
            "params": [
                {
                    "name": "word",
                    "description": "The x64-Word to add with this word.",
                    "type": "X64Word"
                }
            ],
            "return": {
                "description": "A new x64-Word object after adding.",
                "type": "X64Word"
            },
            "example": [
                "\n\n    var added = x64Word.add(anotherX64Word);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 204,
            "description": "An array of 64-bit words.",
            "itemtype": "property",
            "name": "{number} sigBytes The number of significant bytes in this word array.",
            "type": "Array",
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 211,
            "description": "Initializes a newly created word array.",
            "params": [
                {
                    "name": "words",
                    "description": "(Optional) An array of CryptoJS.x64.Word objects.",
                    "type": "Array"
                },
                {
                    "name": "sigBytes",
                    "description": "(Optional) The number of significant bytes in the words.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n\n    var wordArray = CryptoJS.x64.WordArray.create();\n\n    var wordArray = CryptoJS.x64.WordArray.create([\n        CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n        CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n    ]);\n\n    var wordArray = CryptoJS.x64.WordArray.create([\n        CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n        CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n    ], 10);"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 241,
            "description": "Converts this 64-bit word array to a 32-bit word array.",
            "return": {
                "description": "This word array's data as a 32-bit word array.",
                "type": "CryptoJS.lib.WordArray"
            },
            "example": [
                "\n\n    var x32WordArray = x64WordArray.toX32();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/CryptoJS/components/x64-core.js",
            "line": 266,
            "description": "Creates a copy of this word array.",
            "return": {
                "description": "The clone.",
                "type": "X64WordArray"
            },
            "example": [
                "\n\n    var clone = x64WordArray.clone();"
            ],
            "class": "CryptoJS"
        },
        {
            "file": "LADS/js/utils/avltree.js",
            "line": 130,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/doubleLinkedList.js",
            "line": 141,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 80,
            "description": "setup events to detect gestures on the document",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 106,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 149,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 164,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 179,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 207,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 218,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 227,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 234,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 242,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 256,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 349,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 383,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 409,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 433,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 447,
            "description": "stop bubbling the event up to its parents",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 454,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 467,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 473,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 488,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 505,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 523,
            "description": "get events",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 534,
            "description": "reset the list",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 544,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 563,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 581,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 601,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 616,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 629,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 648,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 661,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 678,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 694,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 704,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 758,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 782,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 826,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 844,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 892,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 931,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name!~YUIDOC_LINE~!this",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler!~YUIDOC_LINE~!this",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData!~YUIDOC_LINE~!",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name!~YUIDOC_LINE~!",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent!~YUIDOC_LINE~!",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent!~YUIDOC_LINE~!",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1038,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1084,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1130,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1164,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1269,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1359,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/hammer.js",
            "line": 1395,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.getScrollbarWidth.js",
            "line": 6,
            "description": "Gets the width of the OS scrollbar",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 80,
            "description": "setup events to detect gestures on the document",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 106,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 149,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 164,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 179,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 203,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 214,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 223,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 230,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 238,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 252,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 345,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 379,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 405,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 429,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 443,
            "description": "stop bubbling the event up to its parents",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 450,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 463,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 469,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 484,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 501,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 519,
            "description": "get events",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 530,
            "description": "reset the list",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 540,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 559,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 577,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 597,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 612,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 625,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 644,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 657,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 674,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 690,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 700,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 754,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 778,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 822,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 840,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 888,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 927,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name!~YUIDOC_LINE~!this",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler!~YUIDOC_LINE~!this",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData!~YUIDOC_LINE~!",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name!~YUIDOC_LINE~!",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent!~YUIDOC_LINE~!",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent!~YUIDOC_LINE~!",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1034,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1080,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1126,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1160,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1265,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1355,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1391,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1431,
            "description": "bind dom events\nthis overwrites addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventTypes",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1472,
            "description": "the methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "this": "{Hammer.Instance}",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1486,
            "description": "trigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "this": "{Hammer.Instance}",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/utils/jquery.hammer.js",
            "line": 1507,
            "description": "jQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 1,
            "description": "Back-end for ink drawing. Instance created in InkES. In InkES, we need them to follow artworks.\nUses the RaphaelJS library for svg manipulation.",
            "params": [
                {
                    "name": "canvId",
                    "description": "the id of the div to which we'll assign the Raphael canvas."
                },
                {
                    "name": "html_elt",
                    "description": "in the case that the div above is not in the dom yet, send in a variable for its html element."
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 109,
            "description": "Pans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "params": [
                {
                    "name": "dims",
                    "description": "the current dimensions of our artwork in absolute coordinates"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 172,
            "description": "Convert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "params": [
                {
                    "name": "pth",
                    "description": "the path to reverse"
                }
            ],
            "return": {
                "description": "reversed path (with outer path)"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 228,
            "description": "Uses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 280,
            "description": "A helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 320,
            "description": "Takes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring"
                },
                {
                    "name": "attr",
                    "description": "the attribute we'll parse for"
                },
                {
                    "name": "parsetype",
                    "description": "'i' (int), 's' (string), or 'f' (float)"
                }
            ],
            "return": {
                "description": "the value of the attribute in the correct format"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 340,
            "description": "Loads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "params": [
                {
                    "name": "the",
                    "description": "datastring to be loaded (see update_datastring for datastring format)"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 442,
            "description": "Helper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 450,
            "description": "Pans all objects in the canvas by dx, dy.",
            "params": [
                {
                    "name": "dx,",
                    "description": "dy    the deltas"
                },
                {
                    "name": "draw",
                    "description": "should we take time to draw the objects?"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 505,
            "description": "Helper function to convert to relative coordinates.",
            "params": [
                {
                    "name": "abs_coord",
                    "description": "the absolute coordinate"
                },
                {
                    "name": "canv_dim",
                    "description": "the relevant canvas dimension to scale by"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 515,
            "description": "Removes all Raphael elements from the canvas and clears arrays",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 530,
            "description": "Resizes all elements in the ink canvas.",
            "params": [
                {
                    "name": "scale_x,",
                    "description": "scale_y   the scale factors to resize by"
                },
                {
                    "name": "draw",
                    "description": "should we take the time to draw the result?"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 582,
            "description": "Set the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 606,
            "description": "Setter for the artname of a linked ink's associated artwork",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 614,
            "description": "Setter (sets experience id of ink)",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 622,
            "description": "Sets the initial artwork keyframe",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 630,
            "description": "Sets the ink mode",
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 639,
            "description": "Returns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "return": {
                "description": "up to date datastring"
            },
            "class": "TAG_embed"
        },
        {
            "file": "LADS/js/tagInk.js",
            "line": 698,
            "description": "When we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "params": [
                {
                    "name": "str",
                    "description": "the datastring loaded"
                }
            ],
            "class": "TAG_embed"
        },
        {
            "file": "LADS/hammer.js",
            "line": 10,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 83,
            "description": "setup events to detect gestures on the document",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 108,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "do a merge",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 127,
            "description": "for each",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "iterator",
                    "description": ""
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 156,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 174,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 195,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 210,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 223,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 242,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 255,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 272,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 288,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 298,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 339,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 382,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 397,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 412,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 441,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 453,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 462,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 469,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 477,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 491,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 583,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 617,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 639,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 661,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 675,
            "description": "stop bubbling the event up to its parents",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 682,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 695,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 701,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 717,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 734,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 753,
            "description": "get events",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 764,
            "description": "reset the list",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 788,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 812,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 853,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 871,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 938,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 971,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1099,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1144,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1159,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1194,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1239,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": "Telemetry"
        },
        {
            "file": "LADS/hammer.js",
            "line": 1274,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 3,
            "description": "TAG testing framework\n\nThe TEST SCRIPTS section below has a few test routines. These\nroutines are made public at the bottom of this file. They call\nrunTests on a collection of TEST SCRIPT ACTIONs, which are defined\nin the second section. These are 'atomic' actions that can\nbe combined to make more complex routines. There are a few\nTEST SUPPORT FUNCTIONs defined in the last section below.",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 32,
            "description": "|**** TEST SCRIPTS ****|",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 71,
            "description": "|**** TEST SCRIPT ACTIONS ****|",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 249,
            "description": "|**** TESTING SUPPORT FUNCTIONS ****|",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 253,
            "description": "Run a series of tests",
            "params": [
                {
                    "name": "testObj.tests",
                    "description": "an array of tests to run"
                },
                {
                    "name": "testObj.intervals",
                    "description": "array of time intervals (ms) between these tests"
                }
            ],
            "return": {
                "description": "-1 if an error was thrown during testing"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 272,
            "description": "Called by runTests, calls a single test, then calls runTest with incremented index",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 293,
            "description": "Helper function to concatenate different testing objects",
            "params": [
                {
                    "name": "testObjs",
                    "description": "array of test objects (or functions that will generate test objects) to combine"
                }
            ],
            "return": {
                "description": "combined test objects"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 321,
            "description": "Create click event on the input element",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 330,
            "description": "Simulate a pinch zoom event",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 337,
            "description": "Create mousemove event -- be careful to leave enough interval time to call this",
            "params": [
                {
                    "name": "target",
                    "description": "target element for event"
                },
                {
                    "name": "eventData",
                    "description": "object with the following properties:\n           startX     starting x coordinate relative to #tagRoot\n           startY     ...\n           endX       ...\n           endY"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 394,
            "description": "Recursive call to execute mousemove events",
            "params": [
                {
                    "name": "ctr",
                    "description": "the number of move events we've called"
                },
                {
                    "name": "numMoves",
                    "description": "the number of move events we will call"
                },
                {
                    "name": "data",
                    "description": "event data with properties:\n          startClientX        starting x position in context of browser window\n          startClientY        ...\n          endClientX          ...\n          endClientY          ...\n          target              target element"
                },
                {
                    "name": "callback",
                    "description": "function to be called when all moves have executed"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 432,
            "description": "Linearly interpolate between start and stop by t in [0,1]",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 440,
            "description": "Highlight the target of a testing event (visualize events)",
            "params": [
                {
                    "name": "target",
                    "description": "the element to highlight"
                },
                {
                    "name": "left",
                    "description": "(optional) the left offset of the event within the target"
                },
                {
                    "name": "top",
                    "description": "(optional) ...."
                },
                {
                    "name": "animateRadius",
                    "description": "(optional) if true, highlights get smaller as they disappear"
                },
                {
                    "name": "highlightWidth",
                    "description": "(optional) width of the highlight circle"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 504,
            "params": [
                {
                    "name": "arr",
                    "description": "array for which we want a random index"
                }
            ],
            "return": {
                "description": "random index into array, -1 if arr is empty"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 516,
            "description": "returns random element from input array",
            "params": [
                {
                    "name": "arr",
                    "description": "input array"
                }
            ],
            "return": {
                "description": "random element, null if arr=[]"
            },
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 533,
            "description": "Returns a basic error callback function (long-term, should define\ncase-specific error funcs that actually do some error handling).",
            "params": [
                {
                    "name": "calling",
                    "description": "string: calling function's name"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 546,
            "description": "Show an overlay explaining that the first step in the test is to\nnavigate to the correct starting page.",
            "class": "Telemetry"
        },
        {
            "file": "LADS/tests.js",
            "line": 592,
            "description": "Cancels the currently-running test",
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 33,
            "description": "Handles a post request to the server. Generally, writes data to log file.\nIn the future, this should probably log data in a database.",
            "itemtype": "method",
            "name": "handlePost",
            "params": [
                {
                    "name": "request",
                    "description": "the http request sent to the server",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "a response object we'll write to and return",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/server.js",
            "line": 90,
            "description": "Handles a get request to the server. SHOULD get data from server, return it to client\nfor data viz or analysis.",
            "itemtype": "method",
            "name": "handleGet",
            "params": [
                {
                    "name": "request",
                    "description": "the http request to the server",
                    "type": "Object"
                },
                {
                    "name": "response",
                    "description": "the response we'll send back to the client",
                    "type": "Object"
                }
            ],
            "class": "Telemetry"
        },
        {
            "file": "telemetry/telemetryTest.js",
            "line": 29,
            "description": "Make a request to the telemetry server",
            "params": [
                {
                    "name": "type",
                    "description": "'POST' for updating data or 'GET' for getting it"
                },
                {
                    "name": "data",
                    "description": "object; data to be sent in body of request"
                }
            ],
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: singleton",
            "line": " LADS/js/Autolinker.js-master/dist/Autolinker.js:10"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " LADS/js/Autolinker.js-master/dist/Autolinker.js:207"
        },
        {
            "message": "unknown tag: singleton",
            "line": " LADS/js/Autolinker.js-master/src/Autolinker.js:1"
        },
        {
            "message": "replacing incorrect tag: member with method",
            "line": " LADS/js/Autolinker.js-master/src/matcherRegexSource.js:1"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:134"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:144"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:144"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:154"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:786"
        },
        {
            "message": "unknown tag: ignore",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1869"
        },
        {
            "message": "unknown tag: version",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: created",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: updated",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "unknown tag: link",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1125"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1312"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1336"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2230"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2030"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:245"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:262"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:271"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1158"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1565"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1695"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1717"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1787"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1804"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1820"
        },
        {
            "message": "unknown tag: keepdisplays",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1730"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2474"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2867"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:192"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:202"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/LADS/util/LADS.Util.js:3346"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.geom.js:2"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.geom.js:80"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.geom.js:282"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.geom.js:675"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.v2.js:7873"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.v2.js:7951"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.v2.js:8153"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/d3/d3.v2.js:8546"
        },
        {
            "message": "unknown tag: license",
            "line": " LADS/js/html2canvas/html2canvas.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " LADS/js/html2canvas/jquery.plugin.html2canvas.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:883"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:947"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1020"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1032"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1044"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:334"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:207"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:473"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " LADS/js/utils/hammer.js:544"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:544"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:563"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:581"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:601"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:616"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:629"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:648"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:661"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:678"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:694"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:844"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/hammer.js:892"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1038"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1084"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1130"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1164"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1269"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1359"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/hammer.js:1395"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:106"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:469"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " LADS/js/utils/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:540"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:597"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:612"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:625"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:644"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:657"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:840"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/js/utils/jquery.hammer.js:888"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1034"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1080"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1126"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1160"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1265"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1355"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/js/utils/jquery.hammer.js:1391"
        },
        {
            "message": "unknown tag: this",
            "line": " LADS/js/utils/jquery.hammer.js:1472"
        },
        {
            "message": "unknown tag: this",
            "line": " LADS/js/utils/jquery.hammer.js:1486"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:10"
        },
        {
            "message": "replacing incorrect tag: parm with param",
            "line": " LADS/hammer.js:108"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:108"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:156"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:174"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:195"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:210"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:223"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:242"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:255"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:272"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:288"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:339"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:382"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:397"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:412"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:441"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:701"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:871"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " LADS/hammer.js:938"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:971"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1099"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1144"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1159"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1194"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1239"
        },
        {
            "message": "unknown tag: events",
            "line": " LADS/hammer.js:1274"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:31"
        },
        {
            "message": "Missing item type\nMaximum levels of nesting that will be included when an object is pretty-printed",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:37"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:42"
        },
        {
            "message": "Missing item type\nBy default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:47"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:62"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:126"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:134"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:144"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:154"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:164"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:187"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:197"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:211"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:226"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:271"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:275"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:279"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:284"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:293"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:307"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:323"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:342"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:361"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:381"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:427"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:437"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:455"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:465"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:485"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:503"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:516"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:530"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:540"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:551"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:563"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:575"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:587"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:607"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:646"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:651"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:659"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:713"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:762"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:779"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:786"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:793"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1013"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1044"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1173"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1250"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1258"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1267"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1276"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1285"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1295"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1304"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1311"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1318"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to NaN.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1336"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1344"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1352"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1374"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1377"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1401"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1426"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1429"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1446"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1455"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1473"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1487"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1664"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1760"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1795"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1801"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1805"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1809"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1813"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1817"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1823"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1834"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1842"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1849"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1875"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:1882"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2123"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2200"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2239"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2262"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2275"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2287"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2443"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " LADS/js/Autolinker.js-master/vendor/jasmine/jasmine.js:2540"
        },
        {
            "message": "Missing item type\njscolor, JavaScript Color Picker",
            "line": " LADS/js/LADS/authoring/jscolor/jscolor.js:1"
        },
        {
            "message": "Missing item type\nEnum of file upload types",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:3"
        },
        {
            "message": "Missing item type\nHelper class for performing file uploads\nAlso creates HTML overlay that displays progress / spinning wheel\nNote: everything is handled internally, no external API, does its thing then removes itself and disappears",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:13"
        },
        {
            "message": "Missing item type\nStarts the file upload",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:88"
        },
        {
            "message": "Missing item type\nAppends overlay to root\n(no idea if this will actually disable interactions too as is)",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:434"
        },
        {
            "message": "Missing item type\nTotally remove the overlay from the DOM / destroy",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:444"
        },
        {
            "message": "Missing item type\nInner class that performs actual upload operation\nPartly taken from: http://msdn.microsoft.com/en-us/library/windows/apps/Hh700372.aspx",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:451"
        },
        {
            "message": "Missing item type\nStarts upload of given file",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:459"
        },
        {
            "message": "Missing item type\nCalled when upload is completed",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:517"
        },
        {
            "message": "Missing item type\nIf file upload fails",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:592"
        },
        {
            "message": "Missing item type\nCalled by uploader as upload progresses",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:630"
        },
        {
            "message": "Missing item type\ncopied from LADS.Util.UI because the boxes have crap CSS. tru fax.",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.FileUploader.js:667"
        },
        {
            "message": "Missing item type\nUploads hotspot i to artwork j in its list of artworks to associate to.",
            "line": " LADS/js/LADS/authoring/LADS.Authoring.NewSettingsView.js:2067"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.Artmode.js:686"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.Artmode.js:699"
        },
        {
            "message": "Missing item type\nCreate a drawer with a disclosure button used to display\nhotspots, assets, tours. The returned jQuery object has\na property called \"contents\" which should be used to add\nbuttons or messages to the contents of the drawer.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Artmode.js:782"
        },
        {
            "message": "Missing item type\nThis is the click function LocationHistoryContainer.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Artmode.js:900"
        },
        {
            "message": "Missing item type\nCreate a new right panel for editing Associated Media and append it to the dom (just offscreen)",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:136"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:469"
        },
        {
            "message": "Missing item type\nRefresh the view of available associated media in the sidebar.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:563"
        },
        {
            "message": "Missing item type\nCreate a view into the specified media type",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:672"
        },
        {
            "message": "Missing item type\nInitialize a reusible hotspot div and store it in the module variable $hotspotAnchor",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:784"
        },
        {
            "message": "Missing item type\nInitialize the template required for displaying the Associated Media upload picker",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:860"
        },
        {
            "message": "Missing item type\nDisplay Assoc. Media content in the right bar. The bar will animate out if it is hidden. \nDiscards any unsaved properties of the active content.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:974"
        },
        {
            "message": "Missing item type\nUpdate the content view in the right bar. Will not overwrite any existing properties for the active content.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1075"
        },
        {
            "message": "Missing item type\nSet a metadata value for the active media content.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1108"
        },
        {
            "message": "Missing item type\nGet metadata values for the active media content.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1118"
        },
        {
            "message": "Missing item type\nGenerate a jQuery element suitable for use as an Assoc. Media upload picker\nShould be called after makeUploadTemplate()",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1133"
        },
        {
            "message": "Missing item type\nExecute a request to update or upload Hotspot data on the server.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1284"
        },
        {
            "message": "Missing item type\nHide the right panel with a slide out animation.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ArtworkEditor.js:1418"
        },
        {
            "message": "Missing item type\nThis is the layout for entering from startpage to authoring mode.",
            "line": " LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js:3"
        },
        {
            "message": "Missing item type\nChange the view",
            "line": " LADS/js/LADS/layout/LADS.Layout.ContentAuthoring.js:24"
        },
        {
            "message": "Missing item type\ninitiates UI stuff",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:36"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:255"
        },
        {
            "message": "Missing item type\ncreate send feedback",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:377"
        },
        {
            "message": "Missing item type\nAdds exhibitions to page",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:528"
        },
        {
            "message": "Missing item type\nAdds tour to page\nCreates button in sidebar",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:670"
        },
        {
            "message": "Missing item type\nhave a exhibition/tour selected",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:817"
        },
        {
            "message": "Missing item type\nreturn to the exhibition when clicks back button from catalog",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:826"
        },
        {
            "message": "Missing item type\nreturn to tours page in exhibition mode when clicks back button from artmode.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:866"
        },
        {
            "message": "Missing item type\nFunction to select the tour tab from a different page before switching to this page",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:904"
        },
        {
            "message": "Missing item type\nWhen exhibition is selected in sidebar,\nthis function creates description to display in main display area",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:911"
        },
        {
            "message": "Missing item type\nWhen a tour is selected in sidebar,\nthis function creates description to display in main display area\n-David C.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1432"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1503"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1539"
        },
        {
            "message": "Missing item type\nI comment out all the images\nvar img2 = $(document.createElement('img'));\nimg2.attr('src', tour.Metadata.DescriptionImage2);\nimg2.css({ \"width\": \"auto\", \"height\": \"60%\", \"float\": \"right\", 'margin-right': '5px', 'margin-left': '1%', 'margin-bottom': '1px' }); //height 73\nimg2.attr('id', 'img2');\ncontentdiv.append(img2);        contentdiv.append(img1); //append img1 second to preserve order\n        \ndescContainer.append(img2);",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1597"
        },
        {
            "message": "Missing item type\nFunction to add a related art to a tour at the bottom of the tour information section.  Takes the name of the tour to allow\nthe user to return to the appropriate tour when exiting artmode after entering it from the related art.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1926"
        },
        {
            "message": "Missing item type\nadd related tours to an exhibition in the exhibition information section.",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:1988"
        },
        {
            "message": "Missing item type\nswitch the exhibition page to catalog/artmode",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:2036"
        },
        {
            "message": "Missing item type\nswitch player when currently in a tour page in exhibition",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:2050"
        },
        {
            "message": "Missing item type\nFunction for reflowing page based on orientation / for splitscreen",
            "line": " LADS/js/LADS/layout/LADS.Layout.Exhibitions.js:2077"
        },
        {
            "message": "Missing item type\ninitiates UI stuff",
            "line": " LADS/js/LADS/layout/LADS.Layout.NewCatalog.js:86"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/layout/LADS.Layout.NewCatalog.js:222"
        },
        {
            "message": "Missing item type\nAdds exhibitions to page",
            "line": " LADS/js/LADS/layout/LADS.Layout.NewCatalog.js:263"
        },
        {
            "message": "Missing item type\nWhen exhibition is selected in sidebar,\nthis function creates description to display in main display area",
            "line": " LADS/js/LADS/layout/LADS.Layout.NewCatalog.js:340"
        },
        {
            "message": "Missing item type\nTest internet and server connections",
            "line": " LADS/js/LADS/layout/LADS.Layout.StartPage.js:36"
        },
        {
            "message": "Missing item type\nisBrowserCompatible\n\nReturns true if the browser is compatible with TAG,\nfalse if it isn't",
            "line": " LADS/js/LADS/layout/LADS.Layout.StartPage.js:194"
        },
        {
            "message": "Missing item type\ngetBrowserVersion\n\nReturn's browser name followed by version\ne.g. \"Chrome 34.0.1847.116\"",
            "line": " LADS/js/LADS/layout/LADS.Layout.StartPage.js:229"
        },
        {
            "message": "Missing item type\nFinal layout for Tour Authoring\nAll parts of layout are container in separate files/classes\nLayout file also contains testing instructions / notes / functions",
            "line": " LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js:3"
        },
        {
            "message": "Missing item type\nSecond row on screen, contains ComponentControls and Viewer",
            "line": " LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js:41"
        },
        {
            "message": "Missing item type\nCreates components and sets up UI",
            "line": " LADS/js/LADS/layout/LADS.Layout.TourAuthoringNew.js:164"
        },
        {
            "message": "Missing item type\nPlayer for RIN tours",
            "line": " LADS/js/LADS/layout/LADS.Layout.TourPlayer.js:3"
        },
        {
            "message": "Missing item type\nPlayer for RIN tours",
            "line": " LADS/js/LADS/layout/LADS.Layout.VideoPlayer.js:3"
        },
        {
            "message": "Missing item type\nCreates an Artwork track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ArtworkTrack.js:3"
        },
        {
            "message": "Missing item type\nCreates an Audio track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.AudioTrack.js:3"
        },
        {
            "message": "Missing item type\nInterface representing an action taken by the user\nStored in the undo/redo stack, used for multi-level undo/redo",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Command.js:3"
        },
        {
            "message": "Missing item type\nControls for adding Components, editing properties of them, and undo/redo buttons",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:6"
        },
        {
            "message": "Missing item type\nDisplay warning message if ink cannot be loaded",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:48"
        },
        {
            "message": "Missing item type\nMethod called when \"Edit Ink\" is clicked on a draw-type ink track.\nCreates a new InkController and loads in the datastring of the track.\nShows the edit draw controls.\nIf the ink is linked, need to position it correctly using keyframes and size of artwork.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:112"
        },
        {
            "message": "Missing item type\nMethod called when \"Edit Ink\" is clicked on a block/isolate-type ink track.\nSee comments for showEditDraw.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:380"
        },
        {
            "message": "Missing item type\nMethod called when \"Edit Ink\" is clicked on a text-type ink track.\nSee comments for showEditDraw.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:662"
        },
        {
            "message": "Missing item type\nModified By: Hak",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:936"
        },
        {
            "message": "Missing item type\nAdd parts of function panel",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:944"
        },
        {
            "message": "Missing item type\nOpens the correct file picker based on the file type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1045"
        },
        {
            "message": "Missing item type\nCreates component menu buttons",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1253"
        },
        {
            "message": "Missing item type\nCalled when all artworks/images are deleted; disables ink functionality by graying out \"Ink\" button",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1539"
        },
        {
            "message": "Missing item type\n\"Add Component\" button click handler.\nAllows user to drop menus and exit out of menus by clicking elsewhere.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1570"
        },
        {
            "message": "Missing item type\nHover colors for \"Add Component\" menu items",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1658"
        },
        {
            "message": "Missing item type\nCreates catalog picker for associated media related to the artwork already imported into the tour (Jessica Fu)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1666"
        },
        {
            "message": "Missing item type\nGet associated media for all artworks in the tour from the server.\nCreates the media picker dom elements.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:1742"
        },
        {
            "message": "Missing item type\nCreates the media panel for the media associated to a given artwork. Each is given a .mediaHolder-class container.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:2170"
        },
        {
            "message": "Missing item type\nGets artwork from server, displays catalogPicker",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:2357"
        },
        {
            "message": "Missing item type\nDetach catalog dom elements",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:2873"
        },
        {
            "message": "Missing item type\nBelow are the ink UI controls. They are separated into draw, text, and transparency controls.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:2885"
        },
        {
            "message": "Missing item type\nInk text UI controls (initial text creation, not edit mode)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:2891"
        },
        {
            "message": "Missing item type\nEdit ink text UI controls -- we can probably compress some of this by reusing the inkTextControls",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:3191"
        },
        {
            "message": "Missing item type\nInk draw UI controls (for initial draw authoring, not editing mode)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:3516"
        },
        {
            "message": "Missing item type\nEdit draw controls (edit mode)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:3845"
        },
        {
            "message": "Missing item type\nInk transparency controls (initial authoring, not editing mode)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4162"
        },
        {
            "message": "Missing item type\nEdit transparency controls (edit mode)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4337"
        },
        {
            "message": "Missing item type\nBelow are some helper function for the creation of ink controls above",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4496"
        },
        {
            "message": "Missing item type\nAllows you to click to close ink, edit ink controls (e.g. opacity sliders by clicking on labels).\nClicking on a label will collapse all other controls and show the selected control if it was hidden, hide it if it was shown.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4500"
        },
        {
            "message": "Missing item type\nCollapses all controls in a given panel",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4529"
        },
        {
            "message": "Missing item type\nInitialize the text controls with default values",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4539"
        },
        {
            "message": "Missing item type\nInitialize the transparency controls with default values",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4554"
        },
        {
            "message": "Missing item type\nInitialize the draw controls with default values",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4569"
        },
        {
            "message": "Missing item type\nCreate attach and create as unlinked buttons for ink creation",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4599"
        },
        {
            "message": "Missing item type\nSets display:none for each of the ink control panels",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4709"
        },
        {
            "message": "Missing item type\nRemoves the current ink canvas if there is one",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4722"
        },
        {
            "message": "Missing item type\nCreates an ink canvas",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4735"
        },
        {
            "message": "Missing item type\nAppends the functions panel to the inputted container element",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4764"
        },
        {
            "message": "Missing item type\nAdds the catalog overlays (for artwork and associated media import) to the inputted container element\nUsed in TourAuthoringNew",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ComponentControls.js:4773"
        },
        {
            "message": "Missing item type\nList of constants used across multiple files and locations",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Constants.js:4"
        },
        {
            "message": "Missing item type\nMakes a display\nRepresents region of time where media is playing\nMaps to Keyframe Sequence in RIN\nContains and manages keyframes added to sequence",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:10"
        },
        {
            "message": "Missing item type\nBound to mousedown on display parts\nSets currentDisplay for use by displayClick\nResets currentDisplay on mouseup",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:167"
        },
        {
            "message": "Missing item type\nBound to mousedown on display parts\nSets currentDisplay for use by displayClick\nResets currentDisplay on mouseup",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:503"
        },
        {
            "message": "Missing item type\nSets up menu with correct inputs and buttons",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:739"
        },
        {
            "message": "Missing item type\nRemoves the display.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1020"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1117"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1125"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1174"
        },
        {
            "message": "Missing item type\nthese are helper methods for msMove to reset the graphic info.\ncalled when you are changing the fadein",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1223"
        },
        {
            "message": "Missing item type\nSpecial setter that sets new start but preserves lengths",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1296"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1312"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1336"
        },
        {
            "message": "Missing item type\nLogic for manipulation + dragging of displays\nMoves display to an absolute position given in res\ncurrentDisplay, offset, loc should be set, see _initSVG / _displayMousedown for details\nCurrently three different types of move, determined by loc variable\n1. loc === 'main': translates the entire display, preserves length\n2. loc === 'fade-in' or 'fade-out': drags only fade-in / fade-out region, start of other fade and lengths of fades remaines fixed, length of main area changes",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1390"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1532"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1556"
        },
        {
            "message": "Missing item type\nReturns the length of the longest total collection of subdisplays",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1588"
        },
        {
            "message": "Missing item type\nGets the attached ink displays residing within the bounds of the current display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1604"
        },
        {
            "message": "Missing item type\nGets the art display enclosing an attached ink track display.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1879"
        },
        {
            "message": "Missing item type\nAccepts a display that should be clamped to the current display (i.e. if it sticks out, move it in)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:1902"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2017"
        },
        {
            "message": "Missing item type\nUsed to debug move from command line\nFlips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2164"
        },
        {
            "message": "Missing item type\nHelper function for moving all keyframes when whole display is dragged",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2188"
        },
        {
            "message": "Missing item type\nResets positioning and size of display\nCalled after zoom or scaling",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2202"
        },
        {
            "message": "Missing item type\nAdds a keyframe to the display / sequence",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2230"
        },
        {
            "message": "Missing item type\nFunction to remove keyframe from keyframe array",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2311"
        },
        {
            "message": "Missing item type\nSorts the keyframe array\nMust be called after a keyframe is moved, as keyframes can change order",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2331"
        },
        {
            "message": "Missing item type\nUsed for passing last state of display on to next display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2345"
        },
        {
            "message": "Missing item type\nGet keyframes belonging to display\nUsed for finding bounds of keyframe movement",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2353"
        },
        {
            "message": "Missing item type\nHelper function for keeping keyframes sorted\nSorted in ascending order by x position (in time)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2362"
        },
        {
            "message": "Missing item type\nConverts Display to Experience Stream",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2384"
        },
        {
            "message": "Missing item type\nHelper function for collecting RIN data of associated keyframes",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2449"
        },
        {
            "message": "Missing item type\nConstructs Screenplay entry from display\nReturns object with begin, xml params so entries can be sorted",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Display.js:2522"
        },
        {
            "message": "Missing item type\nMenu for track, display and keyframe editing",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:16"
        },
        {
            "message": "Missing item type\nContains one object for every input in the menu\nInput objects have parameters:",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:31"
        },
        {
            "message": "Missing item type\nInitializes menu html",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:45"
        },
        {
            "message": "Missing item type\nOpens menu",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:152"
        },
        {
            "message": "Missing item type\nClose menu\nDoesn't fire if menuCloseable is set\nCall only from my.root close handler",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:219"
        },
        {
            "message": "Missing item type\nActually closes menu, no menuCloseable check\nCall everywhere except my.root handler",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:229"
        },
        {
            "message": "Missing item type\nAdds an input element to the menu",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:264"
        },
        {
            "message": "Missing item type\nAdds text w/ no related input or button",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:341"
        },
        {
            "message": "Missing item type\nAdds button to screen (click to fire)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:362"
        },
        {
            "message": "Missing item type\nUpdates linked variable with new value in input",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:413"
        },
        {
            "message": "Missing item type\nResets inputs to match current state of associated variables",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:470"
        },
        {
            "message": "Missing item type\nUpdates position of menu and brings it on-screen",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:481"
        },
        {
            "message": "Missing item type\nPerforms input validation",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:526"
        },
        {
            "message": "Missing item type\nConverts string to number according to input format type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:551"
        },
        {
            "message": "Missing item type\nConverts value (typically from accessCallback) to string\nto place in input HTML element",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:580"
        },
        {
            "message": "Missing item type\nRound number to have only\nLADS.TourAuthoring.Constants.menuDecimals decimal places",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.EditorMenu.js:608"
        },
        {
            "message": "Missing item type\nCreates an Image track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.ImageTrack.js:3"
        },
        {
            "message": "Missing item type\nBack-end for ink authoring and editing. Instances are created in ComponentControls and InkES. In\nComponentControls, we need the ability to author and edit inks. In InkES, we need them to follow\nartworks.\nUses the RaphaelJS library for svg manipulation.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:16"
        },
        {
            "message": "Missing item type\nSets ink params to defaults",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:150"
        },
        {
            "message": "Missing item type\nHelper function to parse and multiply dimensions.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:180"
        },
        {
            "message": "Missing item type\nTakes an ellipse or rectangle and adds styling, drag events, drag handles to it.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:191"
        },
        {
            "message": "Missing item type\nAdd an ellipse to the Raphael canvas. Called by the \"Add Ellipse\" button in isolate/block ink mode",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1019"
        },
        {
            "message": "Missing item type\nDEPRECATED\nUsed to give style and drag functionality to old marquees (such as is currently in the Final\nGaribaldi Demo). Once all old marquees have been deleted from tours, this method can be tossed.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1046"
        },
        {
            "message": "Missing item type\nanalogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1052"
        },
        {
            "message": "Missing item type\nAdd a rectangle to the Raphael canvas. Called by the \"Add Rectangle\" button in isolate/block ink mode",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1188"
        },
        {
            "message": "Missing item type\nAdd a text box (a textarea html element) for creating text inks.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1215"
        },
        {
            "message": "Missing item type\nPans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1291"
        },
        {
            "message": "Missing item type\nPans and resizes the ink canvas to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1352"
        },
        {
            "message": "Missing item type\nConvert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1438"
        },
        {
            "message": "Missing item type\nConstruct the path that models the overlap between new_path and existing_path in the appropriate\ntransparency mode. For example, if the paths are intersecting circles, const_path_alg returns the\noutline of the two; if one path is completely inside the other, the inner one is returned in isolate\nmode and the outer is returned in block mode. Both input paths are closed (have a trailing 'z').",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1494"
        },
        {
            "message": "Missing item type\nUses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1700"
        },
        {
            "message": "Missing item type\nA helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1753"
        },
        {
            "message": "Missing item type\nCalled if we drag on the ink canvas in eraser mode. Finds endpoints in the current paths close\nto the drag event location and splices them out of the path array.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1793"
        },
        {
            "message": "Missing item type\nTakes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1830"
        },
        {
            "message": "Missing item type\nReturns the isolate/block bounding shapes.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1859"
        },
        {
            "message": "Missing item type\nReturns the current datastring.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1867"
        },
        {
            "message": "Missing item type\nUses path data representing ellipses and rectangles to get the path representing the ultimate block\nor isolate shape.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1875"
        },
        {
            "message": "Missing item type\nHelper function to get artwork's relative coordinates within the viewer.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1911"
        },
        {
            "message": "Missing item type\nHelper function to get the svg element created by Raphael.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1920"
        },
        {
            "message": "Missing item type\nSearches the current datastring for ellipses and rectangles, stores their information in bounding_shapes.\nAlso stores their coordinates and types in an array shapes and calls shapes_to_paths on shapes\nto transform them to path format.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1928"
        },
        {
            "message": "Missing item type\nReturns true if the text box containing an ink being edited/authored is empty",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1978"
        },
        {
            "message": "Missing item type\nHelper function to check if there is actually a valid ink to attach/save during ink authoring/editing. For texts, need to use isTextboxEmpty.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:1986"
        },
        {
            "message": "Missing item type\nDisplay warning message if ink cannot be loaded",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2018"
        },
        {
            "message": "Missing item type\nChecks if currently inside display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2030"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on text inks before linking them.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2051"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on text inks before creating them unattached.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2089"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on transparencies before linking them.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2104"
        },
        {
            "message": "Missing item type\nHelper function to do some preprocessing on transparencies before creating them unattached.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2137"
        },
        {
            "message": "Missing item type\nFunction to link an ink to an artwork. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if linking was successful, false if warnings",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2152"
        },
        {
            "message": "Missing item type\nFunction to create an unattached ink. Called for all types of inks (possibly after preprocessing, in\nthe cases of texts and transparencies).\nreturn     true if creation was successful, false if warnings",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2259"
        },
        {
            "message": "Missing item type\nLoads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2356"
        },
        {
            "message": "Missing item type\nDraws a transparency to the canvas and adds the correct styling. Also sets trans_currpath, which keeps track of current transparency path.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2524"
        },
        {
            "message": "Missing item type\nLoads a transparency's bounding shapes -- type boundrect and boundellipse -- for editing transparencies",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2538"
        },
        {
            "message": "Missing item type\nDEPRECATED -- constructor for old marquees",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2600"
        },
        {
            "message": "Missing item type\nUsing the point pt, computes the incoming bezier anchor coordinates for the next point (next) in the path.\nThis is done by using the points' types (if pt and next are both endpoints, pt.point.ax2, .ay2 give the relevant information, etc).",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2612"
        },
        {
            "message": "Missing item type\nHelper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2647"
        },
        {
            "message": "Missing item type\nUsing the point next, computes the outgoing bezier anchor coordinates for the point pt on the path.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2655"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2676"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2767"
        },
        {
            "message": "Missing item type\nSometimes points on the boundary of a shape do not register as being inside the shape, so check a few surrounding\npoints as well. If enough of them (2) are inside, call the point inside. This isn't bulletproof, but it should\nwork most of the time.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2796"
        },
        {
            "message": "Missing item type\nHelper function to convert to relative coordinates.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2816"
        },
        {
            "message": "Missing item type\nReturns 1 if any points in order_added match pt.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2826"
        },
        {
            "message": "Missing item type\nRemoves all Raphael elements from the canvas and clears arrays",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2839"
        },
        {
            "message": "Missing item type\nResizes all elements in the ink canvas.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2854"
        },
        {
            "message": "Missing item type\nSet the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2943"
        },
        {
            "message": "Missing item type\n-     * Checks whether two points are effectively the same\n     * @param pt1, pt2   the points in question\n     * @param err        how close the points have to be to be considered the same\n     * @return    whether or not the points are the same (true/false)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2967"
        },
        {
            "message": "Missing item type\nHelper function to convert a textbox to a Raphael text element. //========== should be deprecated",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:2980"
        },
        {
            "message": "Missing item type\nSetter for the artname of a linked ink's associated artwork",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3004"
        },
        {
            "message": "Missing item type\nSet the svg element to handle all pointer events so we can draw on it\n(and also to prevent manipulation of artwork during ink creation)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3012"
        },
        {
            "message": "Missing item type\nSetter (sets experience id of ink)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3024"
        },
        {
            "message": "Missing item type\nSets the initial artwork keyframe",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3032"
        },
        {
            "message": "Missing item type\nSets the ink mode",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3040"
        },
        {
            "message": "Missing item type\nSets the internal reference to the old opacity of the ink track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3049"
        },
        {
            "message": "Missing item type\nSimilar to the retrieveOrigDims function, but uses a proxy variable.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3057"
        },
        {
            "message": "Missing item type\nSimilar to add_attributes, gives text boxes drag functionality, drag handles, and undo/redo functionality.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3084"
        },
        {
            "message": "Missing item type\nTakes transparency bounding shapes and converts them to bezier paths",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3216"
        },
        {
            "message": "Missing item type\nDebugging function; prints out the ink path in our ink track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3255"
        },
        {
            "message": "Missing item type\nScales a path representing a transparency/marquee.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3268"
        },
        {
            "message": "Missing item type\nReturns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3304"
        },
        {
            "message": "Missing item type\nWhen we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3382"
        },
        {
            "message": "Missing item type\nThe following are setters for various ink parameters",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3418"
        },
        {
            "message": "Missing item type\nThe following are getters for different ink parameters.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3485"
        },
        {
            "message": "Missing item type\nThe following are essentially setters, but they take in an id, grab the\nvalue of the dom element with that id, and set the correct variable accordingly",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkAuthoring.js:3520"
        },
        {
            "message": "Missing item type\ndefinition of the inkAuthoring class members:\n  paper -- a Raphael object (a canvas to draw on) fit to the div specified by canvasId\n  loadInk -- loads an Ink to the canvas using the string format specified in update_datastring() below\n  getters and setters for different Ink attributes\n  update functions which take in DOM element IDs and use the settings stored in their values",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js:20"
        },
        {
            "message": "Missing item type\nanalogous to add_attributes(...), but for marquees. The difference is that a marquee\nis a collection of five rectangles, and the center rectangle is the only one that gets\nthe drag handler, while the others have the color attributes.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkController.js:165"
        },
        {
            "message": "Missing item type\nCreates an Ink track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkTrack.js:18"
        },
        {
            "message": "Missing item type\nMix-in / part adding Inkability to tracks - currently not used",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.InkablePart.js:3"
        },
        {
            "message": "Missing item type\nMakes a keyframe\nAssociated with a display (keyframe sequence)\nMaps to keyframe in RIN (duh)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:3"
        },
        {
            "message": "Missing item type\nHelper function to set currentKeyframe and other vars in prep for movement",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:213"
        },
        {
            "message": "Missing item type\nfunctions for changing keyframe style based on selected status",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:388"
        },
        {
            "message": "Missing item type\nSets keyframe volume",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:486"
        },
        {
            "message": "Missing item type\nLogic for manipulation + dragging of keyframes\nMoves keyframe to an absolute position given in res\ncurrentKeyframe and offsets should be set, see initSVG / _keyframeMousedown for details\nAutomatically bounds keyframe movement to associated display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:521"
        },
        {
            "message": "Missing item type\nUsed to debug move from command line\nFlips internal state to simulate clicks\nResets state when finished\nUse only in test code or functions inside display",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:575"
        },
        {
            "message": "Missing item type\nTranslates keyframe by t secs",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:599"
        },
        {
            "message": "Missing item type\nCalled when ratio of time to pixels is changed\nJust resets positioning of keyframes",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:617"
        },
        {
            "message": "Missing item type\nConverts the y location of the keyframe onto scale from 0 to 1\n0 is bottom of timeline, 1 is top\nScale is linear\nUsed for audio keyframes only",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:632"
        },
        {
            "message": "Missing item type\nMaps keyframe to RIN keyframe",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:642"
        },
        {
            "message": "Missing item type\nInitializes keyframe using RIN data",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Keyframe.js:690"
        },
        {
            "message": "Missing item type\nComponent menu at the bottom of the screen\nContains controls for playing and seeking tour",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js:3"
        },
        {
            "message": "Missing item type\nHK25: Wrote this function for updating the slider box as it is moved.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.PlaybackControl.js:632"
        },
        {
            "message": "Missing item type\nUI Tests:\nDrag playhead and playback location fader TODO: test ensuring RIN and playhead are synced\nClick \"Play\" button twice (start and stop)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:3"
        },
        {
            "message": "Missing item type\nAutomated tests module for TourAuthoring",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:9"
        },
        {
            "message": "Missing item type\nMakes a bunch of tracks and displays and keyframes and adds them to the DOM",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:31"
        },
        {
            "message": "Missing item type\nMakes two tracks w/ alternating display regions and calls onUpdate on the timeline",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:83"
        },
        {
            "message": "Missing item type\nMaterial for demo",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:104"
        },
        {
            "message": "Missing item type\nDumb + fast test of viewer updating using pre-coded TAGTest narrative",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:157"
        },
        {
            "message": "Missing item type\nTesting JSON RINdata + server send/recieve",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:165"
        },
        {
            "message": "Missing item type\nTest creating tours",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:182"
        },
        {
            "message": "Missing item type\nTest modification of Name, Content, and Thumbnail fields\nThese are the only fields Tour Authoring needs to worry about",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:191"
        },
        {
            "message": "Missing item type\nTest deletion",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:209"
        },
        {
            "message": "Missing item type\nHack to get audio loaded for editing",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Tests.js:216"
        },
        {
            "message": "Missing item type\nManages all time-related things in TourAuthoring\nStores info re: start/end, current time, scale\nScale converts between time space (seconds) and pixel space (pixels on timeline)\nDispatches events to subscribers on time changes\nAll time values stored as seconds",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:3"
        },
        {
            "message": "Missing item type\nGenerally should use setTime once everything has been initialized:\nSpec object contains any of start, end, scale properties\nAll time-dependent text in DOM is updated as well to reflect changes",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:43"
        },
        {
            "message": "Missing item type\nGet state from viewer",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:135"
        },
        {
            "message": "Missing item type\nDrives forward current time to mimic playback",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:158"
        },
        {
            "message": "Missing item type\nStops playback if time manager is playing",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:201"
        },
        {
            "message": "Missing item type\nFunctions for converting btw pixel space and time space",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:214"
        },
        {
            "message": "Missing item type\nGrab current time in editor using playhead position",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:245"
        },
        {
            "message": "Missing item type\nGrab current time as percent complete of tour",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:262"
        },
        {
            "message": "Missing item type\nGets description of current duration",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:271"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called on updating of current time (during playback or seek)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:282"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on seek update (private)\nContext is set as time object",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:291"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called on updating of duration",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:303"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on duration update (private)\nContext is set as time object",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:312"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called on play() / when it is called\nWill only be called once",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:324"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on play (private)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:334"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called during player interval updates",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:345"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on play updates (private)\nContext is set as time object",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:354"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called on stop",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:366"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on play (private)\nContext is set as time object",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:375"
        },
        {
            "message": "Missing item type\nAdd an event handler to be called on move (either play or seek)\nExecutes before other actions in play or seek, allowing safe updates",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:387"
        },
        {
            "message": "Missing item type\nDispatches events to subscribers on move (private)\nContext is set as time object",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TimeManager.js:397"
        },
        {
            "message": "Missing item type\nManages user editing of tracks",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:3"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:324"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:443"
        },
        {
            "message": "Missing item type\nget the limiting distance for multi select",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:875"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:912"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:913"
        },
        {
            "message": "Missing item type\nturn of the button for multi select",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:932"
        },
        {
            "message": "Missing item type\nupdate the olddata for each selected displays when the mouse goes up\nthis is used in undo/redo to store the previous positions of all of the selected displays",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:950"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:955"
        },
        {
            "message": "Missing item type\nmove the selected displays when user drags one of them",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:994"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1003"
        },
        {
            "message": "Missing item type\ndeselect all displays when the user clicks white space in track or right clicks on the menu",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1053"
        },
        {
            "message": "Missing item type\nPublic API for adding tracks (called from ComponentControls)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1074"
        },
        {
            "message": "Missing item type\nUtility to get track object from title\nUsed to load ink",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1142"
        },
        {
            "message": "Missing item type\nsearches through all displays and compares end times of each",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1158"
        },
        {
            "message": "Missing item type\nSearches list of tracks for track w/ duplicate name\nIf duplicate exists, changes name to prevent duplication",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1188"
        },
        {
            "message": "Missing item type\nList of related artworks to be registered in database",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1565"
        },
        {
            "message": "Missing item type\nChecks if there are any artworks or images in the timeline\nUsed in ComponentControls to check if ink can be added",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1597"
        },
        {
            "message": "Missing item type\nCall when tour has been fully initialized\nRIN reloads fired by edits are blocked until this is called!",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1645"
        },
        {
            "message": "Missing item type\nUpdates selected keyframe (or new keyframe) w/ keyframe data from RIN",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1655"
        },
        {
            "message": "Missing item type\nDeselects selected keyframes on all tracks",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1681"
        },
        {
            "message": "Missing item type\nGrabs current keyframe state from viewer",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1695"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1717"
        },
        {
            "message": "Missing item type\nHelper function to collect track resource entries",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1787"
        },
        {
            "message": "Missing item type\nHelper function to collect track experience streams",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1804"
        },
        {
            "message": "Missing item type\nHelper function for constructing screenplay xml string from tracks",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1820"
        },
        {
            "message": "Missing item type\nFunction passed into tracks to be called on track changes to update RIN data",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1842"
        },
        {
            "message": "Missing item type\nLoads tour file and initializes timeline UI accordingly",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:1879"
        },
        {
            "message": "Missing item type\nfunction deleteAttachedInkDisplays(data) {\n    var i;\n    for (i = 0; i < data.attachedInks.length; i++) {\n        data.attachedInks[i].clearDisplays();\n    }\n}",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:2115"
        },
        {
            "message": "Missing item type\nParses an individual track\nNote that this is scoped into loadRIN function! (needs access to inks variable)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Timeline.js:2127"
        },
        {
            "message": "Missing item type\nMain menu for Tour Authoring\nBack button, rename tour controls, save button, tour options",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TopMenu.js:3"
        },
        {
            "message": "Missing item type\nControl for additional tour options",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js:3"
        },
        {
            "message": "Missing item type\nDrop Down icon\nModified By: Hak",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js:42"
        },
        {
            "message": "Missing item type\nCreates component menu buttons",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.TourOptions.js:84"
        },
        {
            "message": "Missing item type\nRepresents all the displays and keyframes of a piece of media over the duration of a tour\nMaps to Experience Stream in RIN",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:14"
        },
        {
            "message": "Missing item type\nset a display selected when in multi select mode",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1076"
        },
        {
            "message": "Missing item type\nset a display deselected in multi select mode",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1087"
        },
        {
            "message": "Missing item type\nFunctions for track ID\nCorresponds to ordering of tracks in timeline array\nMaps to z-layering in RIN\nEach track ID should be unique, but might change on track switch\nUse updatePos to update id",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1176"
        },
        {
            "message": "Missing item type\nset current display deselected when user clicks it again",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1714"
        },
        {
            "message": "Missing item type\nset the current display deselected",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1730"
        },
        {
            "message": "Missing item type\nHandles drag on track\nPan timeline view\nIf a display or keyframe is selected, move that",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1765"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:1879"
        },
        {
            "message": "Missing item type\nGets the art display enclosing an attached ink track display.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2054"
        },
        {
            "message": "Missing item type\nhelper function that loops through the array of displays \nreturns the start of a display if there's a display nearby\nreturns 1 fadein, 0 fadeout and -1 otherwise",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2081"
        },
        {
            "message": "Missing item type\nhelper function for finding a certain track using it's id\nparam trackNum - the track's id\nreturns the track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2102"
        },
        {
            "message": "Missing item type\nmoves the track and the left and right",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2118"
        },
        {
            "message": "Missing item type\nmoves the track up and down",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2128"
        },
        {
            "message": "Missing item type\nBecause loadRIN calls display.addKeyframe directly,\nwe need to pass it back into the track's list of allKeyframes manually for lines to draw",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2295"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2380"
        },
        {
            "message": "Missing item type\nPublic fn for adding visibility to track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2474"
        },
        {
            "message": "Missing item type\nHelper function for inserting display into array\nKeeps displays sorted by start",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2518"
        },
        {
            "message": "Missing item type\nFor testing purposes only!!!",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2527"
        },
        {
            "message": "Missing item type\nUpdates track w/ new keyframe data at current location",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2540"
        },
        {
            "message": "Missing item type\nAdd track resource to RIN resource table",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2743"
        },
        {
            "message": "Missing item type\nGenerates RIN data for Experience Stream from track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2754"
        },
        {
            "message": "Missing item type\n--- DEPRECATED --- \nHelper function for generating Experience Streams\nGathers Keyframe Sequence data from displays",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2867"
        },
        {
            "message": "Missing item type\nGathers screenplay entries from displays\nDon't forget to sort these things afterwards",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Track.js:2881"
        },
        {
            "message": "Missing item type\nKeeps track of commands and changes issued by program and order of issuing\nCan unexecute or execute (undo / redo) these commands",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:3"
        },
        {
            "message": "Missing item type\nLog a command that has just been executed, ie. add it to the undo stack",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:22"
        },
        {
            "message": "Missing item type\nfunction returns the savedState of the element in the top of the stack, which determines if timeline is dirty or not",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:47"
        },
        {
            "message": "Missing item type\nUndo",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:92"
        },
        {
            "message": "Missing item type\nRedo",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:108"
        },
        {
            "message": "Missing item type\nClears undo / redo stack\nCalled on save or after loading",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:124"
        },
        {
            "message": "Missing item type\nUtility for combining together multiple commands\n(Originally used for tying auto-creation of displays together with track creation)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.UndoManager.js:147"
        },
        {
            "message": "Missing item type\nCreates a Video track",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.VideoTrack.js:3"
        },
        {
            "message": "Missing item type\nPreviews current tour while user edits",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:3"
        },
        {
            "message": "Missing item type\nWhen RIN is interacted with, captures new keyframe data and sends it to timeline",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:83"
        },
        {
            "message": "Missing item type\nTurn capturing off on update",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:126"
        },
        {
            "message": "Missing item type\nGet state of keyframe disable switch.",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:135"
        },
        {
            "message": "Missing item type\nSyncs time manager with buffering state of RIN",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:160"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:192"
        },
        {
            "message": "Missing item type\nPassed to TimeManager on player load",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:202"
        },
        {
            "message": "Missing item type\nGet JQuery object containing rin player",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:217"
        },
        {
            "message": "Missing item type\nUpdates size of viewer area on resize",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:225"
        },
        {
            "message": "Missing item type\nPlay viewer (should only be called from timeManager)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:255"
        },
        {
            "message": "Missing item type\nStop viewer (should only be called from timeManager)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:267"
        },
        {
            "message": "Missing item type\nSeek viewer (should only be called from timeManager)",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:279"
        },
        {
            "message": "Missing item type\nSet volume",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:299"
        },
        {
            "message": "Missing item type\nSet reference to Timeline for keyframe passing",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:308"
        },
        {
            "message": "Missing item type\nLoad tour from url",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:316"
        },
        {
            "message": "Missing item type\nLoad / reload tour into viewer",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:331"
        },
        {
            "message": "Missing item type\nUnloads RIN player\ncall when exiting Authoring",
            "line": " LADS/js/LADS/tourauthoring/LADS.TourAuthoring.Viewer.js:415"
        },
        {
            "message": "Missing item type\nStarts splitscreen",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:38"
        },
        {
            "message": "Missing item type\nHelper function for splitbar sliding and resizing\nNote: inner function in init()",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:114"
        },
        {
            "message": "Missing item type\nHelper function for making exit buttons\nInner function of init()",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:203"
        },
        {
            "message": "Missing item type\nExits splitscreen, making the specified side fullscreen and removing the other",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:224"
        },
        {
            "message": "Missing item type\nAll the layout specific edits that need to be made upon exit\nTheoretically, all of this should get wrapped into layout classes\nbut not sure the class pattern used allows for it",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:270"
        },
        {
            "message": "Missing item type\nMore layout specific fixes\nExhibition fit-texting, called on exit and splitbar move",
            "line": " LADS/js/LADS/util/LADS.Util.Splitscreen.js:392"
        },
        {
            "message": "Missing item type\nUsed by web app code to slide in pages given their html files",
            "line": " LADS/js/LADS/util/LADS.Util.js:1311"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/util/LADS.Util.js:1334"
        },
        {
            "message": "Missing item type\nUtils for Animation, splitscreen, colors and the like",
            "line": " LADS/js/LADS/util/LADS.Util.js:1362"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/LADS/util/LADS.Util.js:1823"
        },
        {
            "message": "Missing item type\nFollowing functions transition between pages while in splitscreen mode",
            "line": " LADS/js/LADS/util/LADS.Util.js:2161"
        },
        {
            "message": "Missing item type\nUse _Split fn's for transitions that need to preserve splitscreen\nNote: pages passed in to this function should have a top-level root node\n(true of exhibition, catalog and artmode)",
            "line": " LADS/js/LADS/util/LADS.Util.js:2164"
        },
        {
            "message": "Missing item type\nUse for any page transition that does not need to preserve splitscreen",
            "line": " LADS/js/LADS/util/LADS.Util.js:2270"
        },
        {
            "message": "Missing item type\nCreates a picker (e.g. click add/remove media in the artwork editor) to manage\n  associations between different TAG components (exhib, artworks, assoc media)",
            "line": " LADS/js/LADS/util/LADS.Util.js:2585"
        },
        {
            "message": "Missing item type\nCreates the media panel",
            "line": " LADS/js/LADS/util/LADS.Util.js:2911"
        },
        {
            "message": "Missing item type\nBuilt-in object extensions",
            "line": " LADS/js/LADS/util/LADS.Util.js:3309"
        },
        {
            "message": "Missing item type\nIf specified object is in the array, remove it",
            "line": " LADS/js/LADS/util/LADS.Util.js:3332"
        },
        {
            "message": "Missing item type\nInsert object into array based on comparator fn given\nAssumes array is already sorted!",
            "line": " LADS/js/LADS/util/LADS.Util.js:3346"
        },
        {
            "message": "Missing item type\nConstrain a number to given range",
            "line": " LADS/js/LADS/util/LADS.Util.js:3365"
        },
        {
            "message": "Missing item type\nSoft delete a hotspot by deleting both the hotspot linq and doq files",
            "line": " LADS/js/LADS/worktop/LADS.Worktop.Database.js:1191"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.csv.js:31"
        },
        {
            "message": "Missing item type\nReturns a function that, given a GeoJSON object (e.g., a feature), returns\nthe corresponding SVG path. The function can be customized by overriding the\nprojection. Point features are mapped to circles with a default radius of\n4.5px; the radius can be specified either as a constant or a function that\nis evaluated per object.",
            "line": " LADS/js/d3/d3.geo.js:357"
        },
        {
            "message": "Missing item type\nGiven a GeoJSON object, returns the corresponding bounding box. The bounding\nbox is represented by a two-dimensional array: [[left, bottom], [right,\ntop]], where left is the minimum longitude, bottom is the minimum latitude,\nright is maximum longitude, and top is the maximum latitude.",
            "line": " LADS/js/d3/d3.geo.js:628"
        },
        {
            "message": "Missing item type\nComputes a contour for a given input grid function using the <a\nhref=\"http://en.wikipedia.org/wiki/Marching_squares\">marching\nsquares</a> algorithm. Returns the contour polygon as an array of points.",
            "line": " LADS/js/d3/d3.geom.js:2"
        },
        {
            "message": "Missing item type\nComputes the 2D convex hull of a set of points using Graham's scanning\nalgorithm. The algorithm has been implemented as described in Cormen,\nLeiserson, and Rivest's Introduction to Algorithms. The running time of\nthis algorithm is O(n log n), where n is the number of input points.",
            "line": " LADS/js/d3/d3.geom.js:80"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.geom.js:282"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.geom.js:675"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.js:394"
        },
        {
            "message": "Missing item type\nSpecifies the value function *x*, which returns a nonnegative numeric value\nfor each datum. The default value function is `Number`. The value function\nis passed two arguments: the current datum and the current index.",
            "line": " LADS/js/d3/d3.layout.js:646"
        },
        {
            "message": "Missing item type\nSpecifies a sort comparison operator *x*. The comparator is passed two data\nelements from the data array, a and b; it returns a negative value if a is\nless than b, a positive value if a is greater than b, and zero if a equals\nb.",
            "line": " LADS/js/d3/d3.layout.js:657"
        },
        {
            "message": "Missing item type\nSpecifies the overall start angle of the pie chart. Defaults to 0. The\nstart angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "line": " LADS/js/d3/d3.layout.js:669"
        },
        {
            "message": "Missing item type\nSpecifies the overall end angle of the pie chart. Defaults to 2π. The\nend angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "line": " LADS/js/d3/d3.layout.js:681"
        },
        {
            "message": "Missing item type\nSpecifies the value function *x*, which returns a nonnegative numeric value\nfor each datum. The default value function is `Number`. The value function\nis passed two arguments: the current datum and the current index.",
            "line": " LADS/js/d3/d3.v2.js:5586"
        },
        {
            "message": "Missing item type\nSpecifies a sort comparison operator *x*. The comparator is passed two data\nelements from the data array, a and b; it returns a negative value if a is\nless than b, a positive value if a is greater than b, and zero if a equals\nb.",
            "line": " LADS/js/d3/d3.v2.js:5597"
        },
        {
            "message": "Missing item type\nSpecifies the overall start angle of the pie chart. Defaults to 0. The\nstart angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "line": " LADS/js/d3/d3.v2.js:5609"
        },
        {
            "message": "Missing item type\nSpecifies the overall end angle of the pie chart. Defaults to 2π. The\nend angle can be specified either as a constant or as a function; in the\ncase of a function, it is evaluated once per array (as opposed to per\nelement).",
            "line": " LADS/js/d3/d3.v2.js:5621"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.v2.js:6861"
        },
        {
            "message": "Missing item type\nReturns a function that, given a GeoJSON object (e.g., a feature), returns\nthe corresponding SVG path. The function can be customized by overriding the\nprojection. Point features are mapped to circles with a default radius of\n4.5px; the radius can be specified either as a constant or a function that\nis evaluated per object.",
            "line": " LADS/js/d3/d3.v2.js:7278"
        },
        {
            "message": "Missing item type\nGiven a GeoJSON object, returns the corresponding bounding box. The bounding\nbox is represented by a two-dimensional array: [[left, bottom], [right,\ntop]], where left is the minimum longitude, bottom is the minimum latitude,\nright is maximum longitude, and top is the maximum latitude.",
            "line": " LADS/js/d3/d3.v2.js:7538"
        },
        {
            "message": "Missing item type\nComputes a contour for a given input grid function using the <a\nhref=\"http://en.wikipedia.org/wiki/Marching_squares\">marching\nsquares</a> algorithm. Returns the contour polygon as an array of points.",
            "line": " LADS/js/d3/d3.v2.js:7873"
        },
        {
            "message": "Missing item type\nComputes the 2D convex hull of a set of points using Graham's scanning\nalgorithm. The algorithm has been implemented as described in Cormen,\nLeiserson, and Rivest's Introduction to Algorithms. The running time of\nthis algorithm is O(n log n), where n is the number of input points.",
            "line": " LADS/js/d3/d3.v2.js:7951"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.v2.js:8153"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/d3/d3.v2.js:8546"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/html2canvas/html2canvas.js:1"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/html2canvas/jquery.plugin.html2canvas.js:1"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:883"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:903"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:912"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:933"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:947"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:976"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:987"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:998"
        },
        {
            "message": "Missing item type\nChecks a node for validity as a Sizzle context",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1020"
        },
        {
            "message": "Missing item type\nDetects XML nodes",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1032"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1044"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1474"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:1507"
        },
        {
            "message": "Missing item type\nClean-up method for dom ready events",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:3432"
        },
        {
            "message": "Missing item type\nThe ready event handler and self cleanup method",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:3446"
        },
        {
            "message": "Missing item type\nDetermines whether an object can have data",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:3597"
        },
        {
            "message": "Missing item type\nRetrieve the actual display of a element",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:5976"
        },
        {
            "message": "Missing item type\nTry to determine the default display value of an element",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:5999"
        },
        {
            "message": "Missing item type\nLoad a url into a page",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:9971"
        },
        {
            "message": "Missing item type\nGets a window from an element",
            "line": " LADS/js/jQueryUI/js/jquery-1.11.0.js:10046"
        },
        {
            "message": "Missing item type\nUtility function for retreiving the text value of an array of DOM nodes",
            "line": " LADS/js/jQueryUI/js/jquery-1.7.1.js:4183"
        },
        {
            "message": "Missing item type\nCreates an \"adjustment\" function for a given overlay placement that\nadjusts an overlay's position depending on its size and placement. This\ngives better perf during draw loop since we don't need to re-check and\nre-calculate the adjustment every single iteration.",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:294"
        },
        {
            "message": "Missing item type\nReturns true if the given tile provides coverage to lower-level tiles of\nlower resolution representing the same content. If neither x nor y is\ngiven, returns true if the entire visible level provides coverage.\n\nNote that out-of-bounds tiles provide coverage in this sense, since\nthere's no content that they would need to cover. Tiles at non-existent\nlevels that are within the image bounds, however, do not.",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:690"
        },
        {
            "message": "Missing item type\nReturns true if the given tile is completely covered by higher-level\ntiles of higher resolution representing the same content. If neither x\nnor y is given, returns true if the entire visible level is covered.",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:728"
        },
        {
            "message": "Missing item type\nSets whether the given tile provides coverage or not.",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:744"
        },
        {
            "message": "Missing item type\nResets coverage information for the given level. This should be called\nafter every draw routine. Note that at the beginning of the next draw\nroutine, coverage for every visible tile should be explicitly set.",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:761"
        },
        {
            "message": "Missing item type\nWhat do I need to return?\n_lastUpdated is instance var\nneed list to load - can just load here...?",
            "line": " LADS/js/seadragon/src/Seadragon.Drawer.js:820"
        },
        {
            "message": "Missing item type\nReturns true if elmtB is a child node of elmtA, or if they're equal.",
            "line": " LADS/js/seadragon/src/Seadragon.MouseTracker.js:40"
        },
        {
            "message": "Missing item type\nOnly triggered once by the deepest element that initially received\nthe mouse down event. We want to make sure THIS event doesn't bubble.\nInstead, we want to trigger the elements that initially received the\nmouse down event (including this one) only if the mouse is no longer\ninside them. Then, we want to release capture, and emulate a regular\nmouseup on the event that this event was meant for.",
            "line": " LADS/js/seadragon/src/Seadragon.MouseTracker.js:341"
        },
        {
            "message": "Missing item type\nOnly triggered in W3C browsers by elements within which the mouse was\ninitially pressed, since they are now listening to the window for\nmouseup during the capture phase. We shouldn't handle the mouseup\nhere if the mouse is still inside this element, since the regular\nmouseup handler will still fire.",
            "line": " LADS/js/seadragon/src/Seadragon.MouseTracker.js:375"
        },
        {
            "message": "Missing item type\nOnly triggered once by the deepest element that initially received\nthe mouse down event. Since no other element has captured the mouse,\nwe want to trigger the elements that initially received the mouse\ndown event (including this one).",
            "line": " LADS/js/seadragon/src/Seadragon.MouseTracker.js:448"
        },
        {
            "message": "Missing item type\nTransform from linear [0,1] to spring [0,1].",
            "line": " LADS/js/seadragon/src/Seadragon.Spring.js:18"
        },
        {
            "message": "Missing item type\nAdds the given element to the given container based on the given anchor,\nsuch that all new elements anchored to a right edge are shown to the left\nof existing elements anchored to the same edge.",
            "line": " LADS/js/seadragon/src/Seadragon.Viewer.js:27"
        },
        {
            "message": "Missing item type\nSchedules a complete redraw of the image",
            "line": " LADS/js/seadragon/src/Seadragon.Viewer.js:490"
        },
        {
            "message": "Missing item type\nSeadragon Ajax 0.8.9 (build 64702 on 2011-01-28)\nhttp://gallery.expression.microsoft.com/SeadragonAjax\nThis code is distributed under the license agreement at:\nhttp://go.microsoft.com/fwlink/?LinkId=164943",
            "line": " LADS/js/seadragon/seadragon-min.js:1"
        },
        {
            "message": "Missing item type\nAuthor: Ricky Brundritt\nWebsite: http://rbrundritt.wordpress.com\nDate: May 21nd, 2011\n\nDescription: \nThis JavaScript file is meant to create a infobox control that is highly \ncustomizable, reusable, and easy to extend. This method takes in a map \nreference, and a set of options. \n\nExample Usage:\n\nvar map, customInfobox;\n\nfunction GetMap()\n{\n\tvar map = new Microsoft.Maps.Map(document.getElementById(\"myMap\"),{ credentials: \"YOUR_BING_MAPS_KEY\" });\n\t\n\tMicrosoft.Maps.registerModule(\"CustomInfoboxModule\", \"scripts/V7CustomInfobox.min.js\");\n\t    Microsoft.Maps.loadModule(\"CustomInfoboxModule\", { callback: function () {\n\t        customInfobox = new CustomInfobox(map);\n\t    }\n\t});\n}\n\n//Have data be returned from data source and added to the cluster layer\nfunction ClusterLayer(results)\n{\n\tclusteredLayer.SetData(results);\n}\n\nfunction displayInfobox() {\n\tcustomInfobox.show(map.getCenter(), \"Hello World\");\n}",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:1"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:63"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:312"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:334"
        },
        {
            "message": "Missing item type\nSets the custom infobox options.\nExample: customInfobox.SetOptions({ gridSize : 30});",
            "line": " LADS/js/utils/BMv7.CustomInfobox/V7CustomInfobox.js:341"
        },
        {
            "message": "Missing item type\nAES block cipher algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/aes.js:80"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/aes.js:204"
        },
        {
            "message": "Missing item type\nCipher core components.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:7"
        },
        {
            "message": "Missing item type\nCreates this cipher in encryption mode.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:39"
        },
        {
            "message": "Missing item type\nCreates this cipher in decryption mode.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:57"
        },
        {
            "message": "Missing item type\nInitializes a newly created cipher.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:75"
        },
        {
            "message": "Missing item type\nResets this cipher to its initial state.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:98"
        },
        {
            "message": "Missing item type\nAdds data to be encrypted or decrypted.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:113"
        },
        {
            "message": "Missing item type\nFinalizes the encryption or decryption process.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:133"
        },
        {
            "message": "Missing item type\nCreates shortcut functions to a cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:167"
        },
        {
            "message": "Missing item type\nMode namespace.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:219"
        },
        {
            "message": "Missing item type\nAbstract base block cipher mode template.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:224"
        },
        {
            "message": "Missing item type\nCreates this mode for encryption.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:228"
        },
        {
            "message": "Missing item type\nCreates this mode for decryption.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:244"
        },
        {
            "message": "Missing item type\nInitializes a newly created mode.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:260"
        },
        {
            "message": "Missing item type\nCipher Block Chaining mode.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:276"
        },
        {
            "message": "Missing item type\nAbstract base CBC mode.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:280"
        },
        {
            "message": "Missing item type\nCBC encryptor.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:285"
        },
        {
            "message": "Missing item type\nProcesses the data block at offset.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:289"
        },
        {
            "message": "Missing item type\nCBC decryptor.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:313"
        },
        {
            "message": "Missing item type\nProcesses the data block at offset.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:317"
        },
        {
            "message": "Missing item type\nPadding namespace.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:367"
        },
        {
            "message": "Missing item type\nPKCS #5/7 padding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:372"
        },
        {
            "message": "Missing item type\nPads data using the algorithm defined in PKCS #5/7.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:376"
        },
        {
            "message": "Missing item type\nUnpads data that had been padded using the algorithm defined in PKCS #5/7.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:409"
        },
        {
            "message": "Missing item type\nInitializes a newly created cipher params object.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:510"
        },
        {
            "message": "Missing item type\nConverts this cipher params object to a string.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:533"
        },
        {
            "message": "Missing item type\nFormat namespace.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:553"
        },
        {
            "message": "Missing item type\nOpenSSL formatting strategy.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:558"
        },
        {
            "message": "Missing item type\nConverts a cipher params object to an OpenSSL-compatible string.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:562"
        },
        {
            "message": "Missing item type\nConverts an OpenSSL-compatible string to a cipher params object.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:590"
        },
        {
            "message": "Missing item type\nA cipher wrapper that returns ciphertext as a serializable cipher params object.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:624"
        },
        {
            "message": "Missing item type\nEncrypts a message.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:637"
        },
        {
            "message": "Missing item type\nDecrypts serialized ciphertext.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:679"
        },
        {
            "message": "Missing item type\nConverts serialized ciphertext to CipherParams,\nelse assumed CipherParams already and returns ciphertext unchanged.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:709"
        },
        {
            "message": "Missing item type\nKey derivation function namespace.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:733"
        },
        {
            "message": "Missing item type\nOpenSSL key derivation function.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:738"
        },
        {
            "message": "Missing item type\nDerives a key and IV from a password.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:742"
        },
        {
            "message": "Missing item type\nA serializable cipher wrapper that derives the key from a password,\nand returns ciphertext as a serializable cipher params object.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:777"
        },
        {
            "message": "Missing item type\nEncrypts a message using a password.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:791"
        },
        {
            "message": "Missing item type\nDecrypts serialized ciphertext using a password.",
            "line": " LADS/js/utils/CryptoJS/components/cipher-core.js:827"
        },
        {
            "message": "Missing item type\nCryptoJS core components.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:7"
        },
        {
            "message": "Missing item type\nCryptoJS namespace.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:11"
        },
        {
            "message": "Missing item type\nLibrary namespace.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:16"
        },
        {
            "message": "Missing item type\nBase object for prototypal inheritance.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:21"
        },
        {
            "message": "Missing item type\nCreates a new object that inherits from this object.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:28"
        },
        {
            "message": "Missing item type\nExtends this object and runs the init method.\nArguments to create() will be passed to init().",
            "line": " LADS/js/utils/CryptoJS/components/core.js:72"
        },
        {
            "message": "Missing item type\nInitializes a newly created object.\nOverride this method to add some logic when your objects are created.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:91"
        },
        {
            "message": "Missing item type\nCopies properties into this object.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:106"
        },
        {
            "message": "Missing item type\nCreates a copy of this object.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:130"
        },
        {
            "message": "Missing item type\nInitializes a newly created word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:152"
        },
        {
            "message": "Missing item type\nConverts this word array to a string.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:174"
        },
        {
            "message": "Missing item type\nConcatenates a word array to this word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:191"
        },
        {
            "message": "Missing item type\nRemoves insignificant bits.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:234"
        },
        {
            "message": "Missing item type\nCreates a copy of this word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:251"
        },
        {
            "message": "Missing item type\nCreates a word array filled with random bytes.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:267"
        },
        {
            "message": "Missing item type\nEncoder namespace.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:290"
        },
        {
            "message": "Missing item type\nHex encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:295"
        },
        {
            "message": "Missing item type\nConverts a word array to a hex string.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:299"
        },
        {
            "message": "Missing item type\nConverts a hex string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:328"
        },
        {
            "message": "Missing item type\nLatin1 encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:355"
        },
        {
            "message": "Missing item type\nConverts a word array to a Latin1 string.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:359"
        },
        {
            "message": "Missing item type\nConverts a Latin1 string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:387"
        },
        {
            "message": "Missing item type\nUTF-8 encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:414"
        },
        {
            "message": "Missing item type\nConverts a word array to a UTF-8 string.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:418"
        },
        {
            "message": "Missing item type\nConverts a UTF-8 string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:439"
        },
        {
            "message": "Missing item type\nResets this block algorithm's data buffer to its initial state.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:465"
        },
        {
            "message": "Missing item type\nAdds new data to this block algorithm's buffer.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:478"
        },
        {
            "message": "Missing item type\nProcesses available data blocks.\n\nThis method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:499"
        },
        {
            "message": "Missing item type\nCreates a copy of this object.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:554"
        },
        {
            "message": "Missing item type\nConfiguration options.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:579"
        },
        {
            "message": "Missing item type\nInitializes a newly created hasher.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:584"
        },
        {
            "message": "Missing item type\nResets this hasher to its initial state.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:601"
        },
        {
            "message": "Missing item type\nUpdates this hasher with a message.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:616"
        },
        {
            "message": "Missing item type\nFinalizes the hash computation.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:639"
        },
        {
            "message": "Missing item type\nCreates a shortcut function to a hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:667"
        },
        {
            "message": "Missing item type\nCreates a shortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:686"
        },
        {
            "message": "Missing item type\nAlgorithm namespace.",
            "line": " LADS/js/utils/CryptoJS/components/core.js:706"
        },
        {
            "message": "Missing item type\nBase64 encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/enc-base64.js:14"
        },
        {
            "message": "Missing item type\nConverts a word array to a Base64 string.",
            "line": " LADS/js/utils/CryptoJS/components/enc-base64.js:18"
        },
        {
            "message": "Missing item type\nConverts a Base64 string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/enc-base64.js:65"
        },
        {
            "message": "Missing item type\nUTF-16 BE encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:14"
        },
        {
            "message": "Missing item type\nConverts a word array to a UTF-16 BE string.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:18"
        },
        {
            "message": "Missing item type\nConverts a UTF-16 BE string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:46"
        },
        {
            "message": "Missing item type\nUTF-16 LE encoding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:73"
        },
        {
            "message": "Missing item type\nConverts a word array to a UTF-16 LE string.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:77"
        },
        {
            "message": "Missing item type\nConverts a UTF-16 LE string to a word array.",
            "line": " LADS/js/utils/CryptoJS/components/enc-utf16.js:105"
        },
        {
            "message": "Missing item type\nThis key derivation function is meant to conform with EVP_BytesToKey.\nwww.openssl.org/docs/crypto/EVP_BytesToKey.html",
            "line": " LADS/js/utils/CryptoJS/components/evpkdf.js:16"
        },
        {
            "message": "Missing item type\nInitializes a newly created key derivation function.",
            "line": " LADS/js/utils/CryptoJS/components/evpkdf.js:34"
        },
        {
            "message": "Missing item type\nDerives a key from a password.",
            "line": " LADS/js/utils/CryptoJS/components/evpkdf.js:49"
        },
        {
            "message": "Missing item type\nDerives a key from a password.",
            "line": " LADS/js/utils/CryptoJS/components/evpkdf.js:98"
        },
        {
            "message": "Missing item type\nConverts the ciphertext of a cipher params object to a hexadecimally encoded string.",
            "line": " LADS/js/utils/CryptoJS/components/format-hex.js:17"
        },
        {
            "message": "Missing item type\nConverts a hexadecimally encoded ciphertext string to a cipher params object.",
            "line": " LADS/js/utils/CryptoJS/components/format-hex.js:34"
        },
        {
            "message": "Missing item type\nHMAC algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/hmac.js:16"
        },
        {
            "message": "Missing item type\nInitializes a newly created HMAC.",
            "line": " LADS/js/utils/CryptoJS/components/hmac.js:20"
        },
        {
            "message": "Missing item type\nResets this HMAC to its initial state.",
            "line": " LADS/js/utils/CryptoJS/components/hmac.js:70"
        },
        {
            "message": "Missing item type\nUpdates this HMAC with a message.",
            "line": " LADS/js/utils/CryptoJS/components/hmac.js:86"
        },
        {
            "message": "Missing item type\nFinalizes the HMAC computation.\nNote that the finalize operation is effectively a destructive, read-once operation.",
            "line": " LADS/js/utils/CryptoJS/components/hmac.js:105"
        },
        {
            "message": "Missing item type\nMD5 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/md5.js:25"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/md5.js:223"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/md5.js:239"
        },
        {
            "message": "Missing item type\nCipher Feedback block mode.",
            "line": " LADS/js/utils/CryptoJS/components/mode-cfb.js:7"
        },
        {
            "message": "Missing item type\nCounter block mode compatible with  Dr Brian Gladman fileenc.c\nderived from CryptoJS.mode.CTR \nJan Hruby jhruby.web@gmail.com",
            "line": " LADS/js/utils/CryptoJS/components/mode-ctr-gladman.js:7"
        },
        {
            "message": "Missing item type\nCounter block mode.",
            "line": " LADS/js/utils/CryptoJS/components/mode-ctr.js:7"
        },
        {
            "message": "Missing item type\nElectronic Codebook block mode.",
            "line": " LADS/js/utils/CryptoJS/components/mode-ecb.js:7"
        },
        {
            "message": "Missing item type\nOutput Feedback block mode.",
            "line": " LADS/js/utils/CryptoJS/components/mode-ofb.js:7"
        },
        {
            "message": "Missing item type\nANSI X.923 padding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/pad-ansix923.js:7"
        },
        {
            "message": "Missing item type\nISO 10126 padding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/pad-iso10126.js:7"
        },
        {
            "message": "Missing item type\nISO/IEC 9797-1 Padding Method 2.",
            "line": " LADS/js/utils/CryptoJS/components/pad-iso97971.js:7"
        },
        {
            "message": "Missing item type\nA noop padding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/pad-nopadding.js:7"
        },
        {
            "message": "Missing item type\nZero padding strategy.",
            "line": " LADS/js/utils/CryptoJS/components/pad-zeropadding.js:7"
        },
        {
            "message": "Missing item type\nPassword-Based Key Derivation Function 2 algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/pbkdf2.js:17"
        },
        {
            "message": "Missing item type\nInitializes a newly created key derivation function.",
            "line": " LADS/js/utils/CryptoJS/components/pbkdf2.js:34"
        },
        {
            "message": "Missing item type\nComputes the Password-Based Key Derivation Function 2.",
            "line": " LADS/js/utils/CryptoJS/components/pbkdf2.js:49"
        },
        {
            "message": "Missing item type\nComputes the Password-Based Key Derivation Function 2.",
            "line": " LADS/js/utils/CryptoJS/components/pbkdf2.js:111"
        },
        {
            "message": "Missing item type\nRabbit stream cipher algorithm.\n\nThis is a legacy version that neglected to convert the key to little-endian.\nThis error doesn't affect the cipher's security,\nbut it does affect its compatibility with other implementations.",
            "line": " LADS/js/utils/CryptoJS/components/rabbit-legacy.js:19"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/rabbit-legacy.js:167"
        },
        {
            "message": "Missing item type\nRabbit stream cipher algorithm",
            "line": " LADS/js/utils/CryptoJS/components/rabbit.js:19"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/rabbit.js:169"
        },
        {
            "message": "Missing item type\nRC4 stream cipher algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/rc4.js:14"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/rc4.js:83"
        },
        {
            "message": "Missing item type\nModified RC4 stream cipher algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/rc4.js:93"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/rc4.js:116"
        },
        {
            "message": "Missing item type\n(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
            "line": " LADS/js/utils/CryptoJS/components/ripemd160.js:7"
        },
        {
            "message": "Missing item type\nRIPEMD160 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/ripemd160.js:55"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/ripemd160.js:222"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/ripemd160.js:238"
        },
        {
            "message": "Missing item type\nSHA-1 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha1.js:18"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha1.js:105"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha1.js:121"
        },
        {
            "message": "Missing item type\nSHA-224 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha224.js:15"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha224.js:35"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha224.js:51"
        },
        {
            "message": "Missing item type\nSHA-256 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha256.js:55"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha256.js:154"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha256.js:170"
        },
        {
            "message": "Missing item type\nSHA-3 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha3.js:79"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha3.js:278"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha3.js:294"
        },
        {
            "message": "Missing item type\nSHA-384 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha384.js:16"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha384.js:38"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha384.js:54"
        },
        {
            "message": "Missing item type\nSHA-512 hash algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/sha512.js:73"
        },
        {
            "message": "Missing item type\nShortcut function to the hasher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha512.js:278"
        },
        {
            "message": "Missing item type\nShortcut function to the HMAC's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/sha512.js:294"
        },
        {
            "message": "Missing item type\nDES block cipher algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/tripledes.js:579"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/tripledes.js:703"
        },
        {
            "message": "Missing item type\nTriple-DES block cipher algorithm.",
            "line": " LADS/js/utils/CryptoJS/components/tripledes.js:713"
        },
        {
            "message": "Missing item type\nShortcut functions to the cipher's object interface.",
            "line": " LADS/js/utils/CryptoJS/components/tripledes.js:747"
        },
        {
            "message": "Missing item type\nx64 namespace.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:14"
        },
        {
            "message": "Missing item type\nA 64-bit word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:19"
        },
        {
            "message": "Missing item type\nInitializes a newly created 64-bit word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:23"
        },
        {
            "message": "Missing item type\nBitwise NOTs this word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:38"
        },
        {
            "message": "Missing item type\nBitwise ANDs this word with the passed word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:54"
        },
        {
            "message": "Missing item type\nBitwise ORs this word with the passed word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:72"
        },
        {
            "message": "Missing item type\nBitwise XORs this word with the passed word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:90"
        },
        {
            "message": "Missing item type\nShifts this word n bits to the left.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:108"
        },
        {
            "message": "Missing item type\nShifts this word n bits to the right.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:131"
        },
        {
            "message": "Missing item type\nRotates this word n bits to the left.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:154"
        },
        {
            "message": "Missing item type\nRotates this word n bits to the right.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:169"
        },
        {
            "message": "Missing item type\nAdds this word with the passed word.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:184"
        },
        {
            "message": "Missing item type\nInitializes a newly created word array.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:211"
        },
        {
            "message": "Missing item type\nConverts this 64-bit word array to a 32-bit word array.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:241"
        },
        {
            "message": "Missing item type\nCreates a copy of this word array.",
            "line": " LADS/js/utils/CryptoJS/components/x64-core.js:266"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/utils/avltree.js:130"
        },
        {
            "message": "Missing item type",
            "line": " LADS/js/utils/doubleLinkedList.js:141"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " LADS/js/utils/hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " LADS/js/utils/hammer.js:80"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " LADS/js/utils/hammer.js:106"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " LADS/js/utils/hammer.js:149"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " LADS/js/utils/hammer.js:164"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " LADS/js/utils/hammer.js:179"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " LADS/js/utils/hammer.js:207"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " LADS/js/utils/hammer.js:218"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " LADS/js/utils/hammer.js:227"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " LADS/js/utils/hammer.js:234"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " LADS/js/utils/hammer.js:242"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " LADS/js/utils/hammer.js:256"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " LADS/js/utils/hammer.js:349"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " LADS/js/utils/hammer.js:383"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " LADS/js/utils/hammer.js:409"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " LADS/js/utils/hammer.js:433"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " LADS/js/utils/hammer.js:447"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " LADS/js/utils/hammer.js:454"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " LADS/js/utils/hammer.js:467"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " LADS/js/utils/hammer.js:473"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " LADS/js/utils/hammer.js:488"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " LADS/js/utils/hammer.js:505"
        },
        {
            "message": "Missing item type\nget events",
            "line": " LADS/js/utils/hammer.js:523"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " LADS/js/utils/hammer.js:534"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " LADS/js/utils/hammer.js:544"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " LADS/js/utils/hammer.js:563"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " LADS/js/utils/hammer.js:581"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " LADS/js/utils/hammer.js:601"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " LADS/js/utils/hammer.js:616"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " LADS/js/utils/hammer.js:629"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " LADS/js/utils/hammer.js:648"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " LADS/js/utils/hammer.js:661"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " LADS/js/utils/hammer.js:678"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " LADS/js/utils/hammer.js:694"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " LADS/js/utils/hammer.js:704"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " LADS/js/utils/hammer.js:758"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " LADS/js/utils/hammer.js:782"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " LADS/js/utils/hammer.js:826"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " LADS/js/utils/hammer.js:844"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " LADS/js/utils/hammer.js:892"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " LADS/js/utils/hammer.js:931"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " LADS/js/utils/hammer.js:1038"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " LADS/js/utils/hammer.js:1084"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " LADS/js/utils/hammer.js:1130"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " LADS/js/utils/hammer.js:1164"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " LADS/js/utils/hammer.js:1269"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " LADS/js/utils/hammer.js:1359"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " LADS/js/utils/hammer.js:1395"
        },
        {
            "message": "Missing item type\nGets the width of the OS scrollbar",
            "line": " LADS/js/utils/jquery.getScrollbarWidth.js:6"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " LADS/js/utils/jquery.hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " LADS/js/utils/jquery.hammer.js:80"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " LADS/js/utils/jquery.hammer.js:106"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " LADS/js/utils/jquery.hammer.js:149"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " LADS/js/utils/jquery.hammer.js:164"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " LADS/js/utils/jquery.hammer.js:179"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " LADS/js/utils/jquery.hammer.js:203"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " LADS/js/utils/jquery.hammer.js:214"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " LADS/js/utils/jquery.hammer.js:223"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " LADS/js/utils/jquery.hammer.js:230"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " LADS/js/utils/jquery.hammer.js:238"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " LADS/js/utils/jquery.hammer.js:252"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " LADS/js/utils/jquery.hammer.js:345"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " LADS/js/utils/jquery.hammer.js:379"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " LADS/js/utils/jquery.hammer.js:405"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " LADS/js/utils/jquery.hammer.js:429"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " LADS/js/utils/jquery.hammer.js:443"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " LADS/js/utils/jquery.hammer.js:450"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " LADS/js/utils/jquery.hammer.js:463"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " LADS/js/utils/jquery.hammer.js:469"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " LADS/js/utils/jquery.hammer.js:484"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " LADS/js/utils/jquery.hammer.js:501"
        },
        {
            "message": "Missing item type\nget events",
            "line": " LADS/js/utils/jquery.hammer.js:519"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " LADS/js/utils/jquery.hammer.js:530"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " LADS/js/utils/jquery.hammer.js:540"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " LADS/js/utils/jquery.hammer.js:559"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " LADS/js/utils/jquery.hammer.js:577"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " LADS/js/utils/jquery.hammer.js:597"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " LADS/js/utils/jquery.hammer.js:612"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " LADS/js/utils/jquery.hammer.js:625"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " LADS/js/utils/jquery.hammer.js:644"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " LADS/js/utils/jquery.hammer.js:657"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " LADS/js/utils/jquery.hammer.js:674"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " LADS/js/utils/jquery.hammer.js:690"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " LADS/js/utils/jquery.hammer.js:700"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " LADS/js/utils/jquery.hammer.js:754"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " LADS/js/utils/jquery.hammer.js:778"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " LADS/js/utils/jquery.hammer.js:822"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " LADS/js/utils/jquery.hammer.js:840"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " LADS/js/utils/jquery.hammer.js:888"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " LADS/js/utils/jquery.hammer.js:927"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " LADS/js/utils/jquery.hammer.js:1034"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " LADS/js/utils/jquery.hammer.js:1080"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " LADS/js/utils/jquery.hammer.js:1126"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " LADS/js/utils/jquery.hammer.js:1160"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " LADS/js/utils/jquery.hammer.js:1265"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " LADS/js/utils/jquery.hammer.js:1355"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " LADS/js/utils/jquery.hammer.js:1391"
        },
        {
            "message": "Missing item type\nbind dom events\nthis overwrites addEventListener",
            "line": " LADS/js/utils/jquery.hammer.js:1431"
        },
        {
            "message": "Missing item type\nthe methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "line": " LADS/js/utils/jquery.hammer.js:1472"
        },
        {
            "message": "Missing item type\ntrigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "line": " LADS/js/utils/jquery.hammer.js:1486"
        },
        {
            "message": "Missing item type\njQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "line": " LADS/js/utils/jquery.hammer.js:1507"
        },
        {
            "message": "Missing item type\nBack-end for ink drawing. Instance created in InkES. In InkES, we need them to follow artworks.\nUses the RaphaelJS library for svg manipulation.",
            "line": " LADS/js/tagInk.js:1"
        },
        {
            "message": "Missing item type\nPans and resizes all inks to move with the artwork. Uses the initial keyframe of the artwork (converted here to absolute coordinates) and the\ninputted dimensions to compute deltas and scale factors. Once we have these, first pan to (0,0), then scale, then pan to pos+deltas.",
            "line": " LADS/js/tagInk.js:109"
        },
        {
            "message": "Missing item type\nConvert a string representing a block transparency to one representing an isolate transparency.\nBlock/isolate is determined by the fill property of the svg element. If we draw the path counterclockwise (rather than clockwise)\nand also draw a path around the whole canvas, the in-between space will be filled and we will get an isolate transparency. This\nmethod reverses the given path and adds the aforementioned outer path.",
            "line": " LADS/js/tagInk.js:172"
        },
        {
            "message": "Missing item type\nUses the arrays ml, xy, and pa to draw paths with the correct properties.\nFirst clears the canvas of existing paths, then draws new ones.",
            "line": " LADS/js/tagInk.js:228"
        },
        {
            "message": "Missing item type\nA helper function to draw transparencies. Takes the arrays transLetters (representing the\nsvg path commands in the transparency string) and transCoords (corresponding locations on the\ncanvas in relative coordinates) and draws the appropriate type of transparency to the canvas.\nIf the type is 'isolate,' calls block_to_isol, which reverses the path and adds an outer path\naround the canvas to fill the in-between space.",
            "line": " LADS/js/tagInk.js:280"
        },
        {
            "message": "Missing item type\nTakes in a datastring and parses for a certain attribute by splitting at \"[\" and \"]\" (these surround\nattribute names).\nNOTE if errors are coming from this function, could be that the datastring is empty...",
            "line": " LADS/js/tagInk.js:320"
        },
        {
            "message": "Missing item type\nLoads an ink onto the ink canvas using its datastring (e.g. from track data).",
            "line": " LADS/js/tagInk.js:340"
        },
        {
            "message": "Missing item type\nHelper function to determine whether p1 and p2 are effectively the same point. Returns true if so.",
            "line": " LADS/js/tagInk.js:442"
        },
        {
            "message": "Missing item type\nPans all objects in the canvas by dx, dy.",
            "line": " LADS/js/tagInk.js:450"
        },
        {
            "message": "Missing item type\nHelper function to convert to relative coordinates.",
            "line": " LADS/js/tagInk.js:505"
        },
        {
            "message": "Missing item type\nRemoves all Raphael elements from the canvas and clears arrays",
            "line": " LADS/js/tagInk.js:515"
        },
        {
            "message": "Missing item type\nResizes all elements in the ink canvas.",
            "line": " LADS/js/tagInk.js:530"
        },
        {
            "message": "Missing item type\nSet the variables related to adjustViewBox (original artwork location) using the art proxy,\nwhich keeps track of its dimensions",
            "line": " LADS/js/tagInk.js:582"
        },
        {
            "message": "Missing item type\nSetter for the artname of a linked ink's associated artwork",
            "line": " LADS/js/tagInk.js:606"
        },
        {
            "message": "Missing item type\nSetter (sets experience id of ink)",
            "line": " LADS/js/tagInk.js:614"
        },
        {
            "message": "Missing item type\nSets the initial artwork keyframe",
            "line": " LADS/js/tagInk.js:622"
        },
        {
            "message": "Missing item type\nSets the ink mode",
            "line": " LADS/js/tagInk.js:630"
        },
        {
            "message": "Missing item type\nReturns a string giving all necessary information to recreate the current scene.\nThe result is stored in ink tracks as the 'datastring.' Also used throughout\nInkAuthoring to make sure we have an up to date datastring. The formats for each\ntype of ink is given below (note that the trailing '[]' makes it easier to parse).\nNote that the MARQUEE type is deprecated -- it has been replaced by TRANS type\ntransparencies represented by paths rather than collections of rectangles. The\nBOUNDRECT and BOUNDELLIPSE types are for reloading rectangles and ellipses when we\nedit transparencies (their formats are identical to RECT/ELLIPSE). All coordinates are relative.\n\n  PATH::[pathstring]<svg path string>[stroke]<color>[strokeo]<opacity>[strokew]<width>[]\n  RECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  ELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  MARQUEE::[x]<x>[y]<y>[w]<width>[h]<height>[surrfillc]<fill color>[surrfillo]<fill opac>[]\n  TEXT::[str]<text>[font]<font>[fontsize]<fontsize>[color]<font color>[x]<x>[y]<y>[w]<width>[h]<height>[]\n  TRANS::[path]<path>[color]<color>[opac]<opac>[mode]<block or isolate>[]\n  BOUNDRECT::[x]<x>[y]<y>[w]<width>[h]<height>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]\n  BOUNDELLIPSE::[cx]<center x>[cy]<center y>[rx]<x radius>[ry]<y radius>[fillc]<color>[fillo]<opac>[strokec]<color>[strokeo]<opac>[strokew]<width>[]",
            "line": " LADS/js/tagInk.js:639"
        },
        {
            "message": "Missing item type\nWhen we load in a path datastring, update ml, xy, and pa to reflect the new data.",
            "line": " LADS/js/tagInk.js:698"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " LADS/hammer.js:10"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " LADS/hammer.js:83"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " LADS/hammer.js:108"
        },
        {
            "message": "Missing item type\nfor each",
            "line": " LADS/hammer.js:127"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " LADS/hammer.js:156"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " LADS/hammer.js:174"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " LADS/hammer.js:195"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " LADS/hammer.js:210"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " LADS/hammer.js:223"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " LADS/hammer.js:242"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " LADS/hammer.js:255"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " LADS/hammer.js:272"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " LADS/hammer.js:288"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " LADS/hammer.js:298"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " LADS/hammer.js:339"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " LADS/hammer.js:382"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " LADS/hammer.js:397"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " LADS/hammer.js:412"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " LADS/hammer.js:441"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " LADS/hammer.js:453"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " LADS/hammer.js:462"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " LADS/hammer.js:469"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " LADS/hammer.js:477"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " LADS/hammer.js:491"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " LADS/hammer.js:583"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " LADS/hammer.js:617"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " LADS/hammer.js:639"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " LADS/hammer.js:661"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " LADS/hammer.js:675"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " LADS/hammer.js:682"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " LADS/hammer.js:695"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " LADS/hammer.js:701"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " LADS/hammer.js:717"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " LADS/hammer.js:734"
        },
        {
            "message": "Missing item type\nget events",
            "line": " LADS/hammer.js:753"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " LADS/hammer.js:764"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " LADS/hammer.js:788"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " LADS/hammer.js:812"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " LADS/hammer.js:853"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " LADS/hammer.js:871"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " LADS/hammer.js:938"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " LADS/hammer.js:971"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " LADS/hammer.js:1099"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " LADS/hammer.js:1144"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " LADS/hammer.js:1159"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " LADS/hammer.js:1194"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " LADS/hammer.js:1239"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " LADS/hammer.js:1274"
        },
        {
            "message": "Missing item type\nTAG testing framework\n\nThe TEST SCRIPTS section below has a few test routines. These\nroutines are made public at the bottom of this file. They call\nrunTests on a collection of TEST SCRIPT ACTIONs, which are defined\nin the second section. These are 'atomic' actions that can\nbe combined to make more complex routines. There are a few\nTEST SUPPORT FUNCTIONs defined in the last section below.",
            "line": " LADS/tests.js:3"
        },
        {
            "message": "Missing item type\n|**** TEST SCRIPTS ****|",
            "line": " LADS/tests.js:32"
        },
        {
            "message": "Missing item type\n|**** TEST SCRIPT ACTIONS ****|",
            "line": " LADS/tests.js:71"
        },
        {
            "message": "Missing item type\n|**** TESTING SUPPORT FUNCTIONS ****|",
            "line": " LADS/tests.js:249"
        },
        {
            "message": "Missing item type\nRun a series of tests",
            "line": " LADS/tests.js:253"
        },
        {
            "message": "Missing item type\nCalled by runTests, calls a single test, then calls runTest with incremented index",
            "line": " LADS/tests.js:272"
        },
        {
            "message": "Missing item type\nHelper function to concatenate different testing objects",
            "line": " LADS/tests.js:293"
        },
        {
            "message": "Missing item type\nCreate click event on the input element",
            "line": " LADS/tests.js:321"
        },
        {
            "message": "Missing item type\nSimulate a pinch zoom event",
            "line": " LADS/tests.js:330"
        },
        {
            "message": "Missing item type\nCreate mousemove event -- be careful to leave enough interval time to call this",
            "line": " LADS/tests.js:337"
        },
        {
            "message": "Missing item type\nRecursive call to execute mousemove events",
            "line": " LADS/tests.js:394"
        },
        {
            "message": "Missing item type\nLinearly interpolate between start and stop by t in [0,1]",
            "line": " LADS/tests.js:432"
        },
        {
            "message": "Missing item type\nHighlight the target of a testing event (visualize events)",
            "line": " LADS/tests.js:440"
        },
        {
            "message": "Missing item type",
            "line": " LADS/tests.js:504"
        },
        {
            "message": "Missing item type\nreturns random element from input array",
            "line": " LADS/tests.js:516"
        },
        {
            "message": "Missing item type\nReturns a basic error callback function (long-term, should define\ncase-specific error funcs that actually do some error handling).",
            "line": " LADS/tests.js:533"
        },
        {
            "message": "Missing item type\nShow an overlay explaining that the first step in the test is to\nnavigate to the correct starting page.",
            "line": " LADS/tests.js:546"
        },
        {
            "message": "Missing item type\nCancels the currently-running test",
            "line": " LADS/tests.js:592"
        },
        {
            "message": "Missing item type\nMake a request to the telemetry server",
            "line": " telemetry/telemetryTest.js:29"
        }
    ]
}